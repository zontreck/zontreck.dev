[{"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\index.js":"1","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\App.js":"2","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\reportWebVitals.js":"3","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\LoginPage.js":"4","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\RegisterPage.js":"5","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Home.js":"6","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\ChangePassword.js":"7","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\ZontreckDevNotificationChecks.js":"8","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Account.js":"9","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Logout.js":"10","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MemorySingleton.js":"11","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MenuHandlers\\AccountMenu.js":"12","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHManagerView.js":"13","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\StoreEditor.js":"14","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\StoresPage.js":"15","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\OpenSimulatorManager.js":"16","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\StoreProductsView.js":"17","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\VendorView.js":"18","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHDeckEditorView.js":"19","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHDeckScriptView.js":"20","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHGameEditView.js":"21","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHCardEditorView.js":"22","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\SingleTimers.js":"23","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\AlertStore.js":"24","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\ProductsTab.js":"25","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Search.js":"26","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MenuHandlers\\AccountGuestOptions.js":"27","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MenuHandlers\\AccountUserOptions.js":"28","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHGameEditorView.js":"29","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\ParticleEditorView1.js":"30","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\ParticleEditor.js":"31"},{"size":598,"mtime":1611385611216,"results":"32","hashOfConfig":"33"},{"size":7209,"mtime":1613190143182,"results":"34","hashOfConfig":"33"},{"size":364,"mtime":1606522646350,"results":"35","hashOfConfig":"33"},{"size":4054,"mtime":1611307554909,"results":"36","hashOfConfig":"33"},{"size":5994,"mtime":1611782978146,"results":"37","hashOfConfig":"33"},{"size":479,"mtime":1606522623313,"results":"38","hashOfConfig":"33"},{"size":3801,"mtime":1611307540918,"results":"39","hashOfConfig":"33"},{"size":2186,"mtime":1611307583078,"results":"40","hashOfConfig":"33"},{"size":13029,"mtime":1611799476390,"results":"41","hashOfConfig":"33"},{"size":418,"mtime":1611307560424,"results":"42","hashOfConfig":"33"},{"size":243,"mtime":1608590662898,"results":"43","hashOfConfig":"33"},{"size":356,"mtime":1605208128322,"results":"44","hashOfConfig":"33"},{"size":5410,"mtime":1611444077596,"results":"45","hashOfConfig":"33"},{"size":10194,"mtime":1611799680231,"results":"46","hashOfConfig":"33"},{"size":7992,"mtime":1611352294773,"results":"47","hashOfConfig":"33"},{"size":7655,"mtime":1611799701109,"results":"48","hashOfConfig":"33"},{"size":15940,"mtime":1611799562663,"results":"49","hashOfConfig":"33"},{"size":12251,"mtime":1611799526221,"results":"50","hashOfConfig":"33"},{"size":3995,"mtime":1611799992897,"results":"51","hashOfConfig":"33"},{"size":2854,"mtime":1611386148378,"results":"52","hashOfConfig":"33"},{"size":3781,"mtime":1611865841490,"results":"53","hashOfConfig":"33"},{"size":7504,"mtime":1611878344663,"results":"54","hashOfConfig":"33"},{"size":553,"mtime":1606522651777,"results":"55","hashOfConfig":"33"},{"size":352,"mtime":1606522612244,"results":"56","hashOfConfig":"33"},{"size":1896,"mtime":1611312589243,"results":"57","hashOfConfig":"33"},{"size":4166,"mtime":1611307576208,"results":"58","hashOfConfig":"33"},{"size":325,"mtime":1605207847427,"results":"59","hashOfConfig":"33"},{"size":362,"mtime":1605215864306,"results":"60","hashOfConfig":"33"},{"size":426,"mtime":1611882243766,"results":"61","hashOfConfig":"33"},{"size":1946,"mtime":1613189849160,"results":"62","hashOfConfig":"33"},{"size":6272,"mtime":1613205925725,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"37pvvk",{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"66"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"66"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"66"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\index.js",[],["148","149"],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\App.js",["150","151","152","153","154","155"],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\reportWebVitals.js",[],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\LoginPage.js",["156","157","158","159","160","161"],"import React, { useState } from \"react\";\r\nimport { Button, Form, FormText, Col, Card } from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst LoginPage = (props) => {\r\n  const { addToast } = useToasts();\r\n  const [user, setUser] = useState(\"\");\r\n  const [pass, setPass] = useState(\"\");\r\n  const handleUser = (event) => {\r\n    setUser(event.target.value);\r\n  };\r\n  const handlePass = (event) => {\r\n    setPass(event.target.value);\r\n  };\r\n  const goHome = () => {\r\n    window.location = \"/\";\r\n  };\r\n  const doLogin = () => {\r\n    // Create HTTP request\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/LoginAccount.php\",\r\n      true\r\n    );\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\r\n    var params = \"user=\" + user + \"&pwd=\" + pass;\r\n\r\n    xhr.addEventListener(\"load\", () => {\r\n      console.log(\"Ready state has changed. New state: \" + xhr.readyState);\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n\r\n        if (data[0] == \"LoginAccount\") {\r\n          if (data[1] == \"0\") {\r\n            addToast(\"No Such Account\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 10000,\r\n            });\r\n          } else if (data[1] == \"1\") {\r\n            addToast(\"Password incorrect\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 10000,\r\n            });\r\n          } else {\r\n            var opts = data[1].split(\";\");\r\n            if (opts[0] == \"ok\") {\r\n              setTimeout(() => {\r\n                goHome();\r\n              }, 5000);\r\n              addToast(\r\n                \"Login Success. You now have authority level: \" + opts[1],\r\n                {\r\n                  appearance: \"success\",\r\n                  autoDismiss: true,\r\n                  autoDismissTimeout: 15000,\r\n                }\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    xhr.send(params);\r\n  };\r\n  return (\r\n    <center>\r\n      <div\r\n        style={{\r\n          width: \"50vh\",\r\n          height: \"50vh\",\r\n          top: \"25%\",\r\n          position: \"absolute\",\r\n          left: \"50vh\",\r\n          color: \"black\",\r\n        }}\r\n      >\r\n        <Card style={{ width: \"28rem\" }}>\r\n          <Card.Header>\r\n            <strong>Zontreck.dev Login</strong>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>\r\n              Use this form to login to an existing zontreck.dev account\r\n              <br />\r\n              <br />\r\n              <Form>\r\n                <Form.Group>\r\n                  <Form.Label>SL Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Abcde Resident\"\r\n                    onChange={handleUser}\r\n                    value={user}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>PASSWORD</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Your password\"\r\n                    onChange={handlePass}\r\n                    value={pass}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    Never share your password with anyone, even an authorized\r\n                    user. Our system allows designation of managers for stores.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Button variant=\"danger\" onClick={goHome}>\r\n                    Cancel\r\n                  </Button>\r\n                  {\"    \"}\r\n                  <Button variant=\"primary\" onClick={doLogin}>\r\n                    Login\r\n                  </Button>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </center>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\RegisterPage.js",["162","163","164","165","166","167","168"],"import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Button, Form, Col, Modal } from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst RegisterPage = (props) => {\r\n  const { addToast } = useToasts();\r\n  const [modal, setModal] = useState(true);\r\n  const [username, setUser] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [password, setPass] = useState(\"\");\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n  const handleUser = (event) => {\r\n    setUser(event.target.value);\r\n  };\r\n\r\n  const handleEmail = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const handleToken = (event) => {\r\n    setToken(event.target.value);\r\n  };\r\n\r\n  const handlePass = (event) => {\r\n    setPass(event.target.value);\r\n  };\r\n\r\n  const submitAction = () => {\r\n    console.log(\"Registering account...\");\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/RegisterAccount.php\",\r\n      true\r\n    );\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    var params =\r\n      \"user=\" +\r\n      username +\r\n      \"&email=\" +\r\n      email +\r\n      \"&token=\" +\r\n      token +\r\n      \"&pwd=\" +\r\n      password;\r\n    xhr.addEventListener(\"load\", () => {\r\n      console.log(\"Ready state has changed. New state: \" + xhr.readyState);\r\n      if (xhr.readyState === 4) {\r\n        // Do something!\r\n        console.log(\"Request completed: \" + xhr.responseText);\r\n        var data = xhr.responseText.split(\";;\");\r\n        console.log(\"Data 0: \" + data[0]);\r\n        if (data[0] == \"RegisterAccount\") {\r\n          console.log(\"In- RegisterAccount. Checking for response code\");\r\n          if (data[1] == \"0\") {\r\n            // Display a success message\r\n            console.log(\"Approval for account\");\r\n            toggle();\r\n\r\n            addToast(\"Account created you may now login.\", {\r\n              appearance: \"success\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n\r\n            setTimeout(() => {\r\n              window.location = \"/login\";\r\n            }, 5000);\r\n          } else if (data[1] == \"1\") {\r\n            console.log(\"Already exists\");\r\n\r\n            addToast(\"This account already exists\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          } else if (data[1] == \"2\") {\r\n            toggle();\r\n            console.log(\"No token\");\r\n            addToast(\"You must request a authorization token from our store.\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          } else if (data[1] == \"3\") {\r\n            console.log(\"Error, token invalid\");\r\n            addToast(\"Your token does not match our records\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        console.log(\"Request: \" + xhr.readyState);\r\n      }\r\n    });\r\n\r\n    xhr.send(params);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"info\" onClick={toggle}>\r\n        Re-show Registration Page\r\n      </Button>\r\n      <div id=\"toasts\"> </div>\r\n      <Modal show={modal} onHide={toggle}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Register</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Row>\r\n              <h3>\r\n                Note that registration for a Zontreck.dev account requires that\r\n                you requested this action from in-world.\r\n              </h3>\r\n            </Form.Row>\r\n            <Form.Group>\r\n              <Form.Label>SL Username</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                size=\"sm\"\r\n                id=\"sl_username\"\r\n                onChange={handleUser}\r\n                placeholder=\"Abcde Resident\"\r\n                value={username}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Email</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"email\"\r\n                id=\"sl_email\"\r\n                onChange={handleEmail}\r\n                placeholder=\"user@email.net\"\r\n                value={email}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We will never share your email with anyone\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Auth Token</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                id=\"sl_auth\"\r\n                onChange={handleToken}\r\n                placeholder=\"Authorization Token\"\r\n                value={token}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Password</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"password\"\r\n                id=\"password\"\r\n                onChange={handlePass}\r\n                placeholder=\"Not your SL Password\"\r\n                value={password}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <b>\r\n                Note: Your account level will be Level 1. If you require a\r\n                higher clearance level (ex. ZNI Support), please inform\r\n                one of the managers once your account is created.\r\n              </b>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer toggle={toggle}>\r\n          <Button variant=\"danger\" onClick={toggle} href=\"/\">\r\n            Cancel\r\n          </Button>{\" \"}\r\n          <Button variant=\"primary\" onClick={submitAction}>\r\n            Register\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Home.js",["169","170","171","172","173"],"import React, { useState } from \"react\";\r\nimport { Collapse, Navbar, Nav, Dropdown } from \"react-bootstrap\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <center>\r\n        <h2>\r\n          Welcome to zontreck.dev!\r\n          <br />\r\n          <br />\r\n          This is our homepage. <br />\r\n          There is nothing here, but if you use the navigation bar, you can\r\n          choose an action.\r\n        </h2>\r\n      </center>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\ChangePassword.js",["174","175","176","177","178","179","180"],"import React, { useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Card,\r\n  Tabs,\r\n  Tab,\r\n  Modal,\r\n  Button,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst ChangePasswordPage = (props) => {\r\n  const { addToast } = useToasts();\r\n  const [oldPwd, setOldPwd] = useState(\"\");\r\n  const [newPwd, setNewPwd] = useState(\"\");\r\n\r\n  const handleOldChange = (e) => {\r\n    setOldPwd(e.target.value);\r\n  };\r\n\r\n  const handleNewChange = (e) => {\r\n    setNewPwd(e.target.value);\r\n  };\r\n\r\n  const changePassword = () => {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/ChangeAccountPassword.php\",\r\n      false\r\n    );\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        if (data[0] == \"ChangeAccountPassword\") {\r\n          if (data[1] == \"0\") {\r\n            addToast(\"Your password has been updated. You must login again.\", {\r\n              appearance: \"success\",\r\n            });\r\n            setTimeout(() => {\r\n              window.location = \"/logout\";\r\n            }, 5000);\r\n          } else if (data[1] == \"1\") {\r\n            addToast(\"You must be logged in to change your password.\", {\r\n              appearance: \"error\",\r\n            });\r\n            setTimeout(() => {\r\n              window.location = \"/login\";\r\n            }, 2500);\r\n          } else if (data[1] == \"2\") {\r\n            addToast(\"Authentication failure with the old password\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n    var params = \"oldPwd=\" + oldPwd + \"&newPwd=\" + newPwd;\r\n    xhr.send(params);\r\n  };\r\n  return (\r\n    <div>\r\n      <center>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n          <Breadcrumb.Item active>Change Password</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n\r\n        <Card style={{ width: \"32rem\", color: \"#00a7a7\", textAlign: \"left\" }}>\r\n          <Card.Header>\r\n            <h4>Change Password</h4>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>\r\n              <Form>\r\n                <Form.Group>\r\n                  <Form.Label>Old Password</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Your current Zontreck.dev Password\"\r\n                    onChange={handleOldChange}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>New Password</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Not your SL password\"\r\n                    onChange={handleNewChange}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    * Note: Not your Second Life password\r\n                  </Form.Text>\r\n                  <strong>\r\n                    Do not ever use your Second Life password to create accounts\r\n                    on other systems.\r\n                  </strong>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <Button variant=\"danger\" href=\"/account\">\r\n              Cancel\r\n            </Button>{\" \"}\r\n            <Button variant=\"primary\" onClick={changePassword}>\r\n              Submit\r\n            </Button>\r\n          </Card.Footer>\r\n        </Card>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordPage;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\ZontreckDevNotificationChecks.js",["181","182","183","184","185","186","187","188","189","190"],"import React, { useState } from \"react\";\r\nimport { Breadcrumb, Card, Tabs, Tab, Modal, Button } from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport AlertStore from \"./AlertStore.js\";\r\nimport SingleTimers from \"./SingleTimers.js\";\r\n\r\nconst ZDevNotifierCheck = (props) => {\r\n  const { addToast } = useToasts();\r\n  const unixTime = () => {\r\n    return Math.floor(Date.now() / 1000);\r\n  };\r\n  const alerts = [];\r\n  const timerCode = () => {\r\n    // Query the server for any alerts\r\n    // Store the last checked time. If the server's alert has a timestamp greater than our current time, then the alert is valid. The alert must have a timestamp set in the future, which is effectively the timestamp for when the alert will expire.\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/CheckNotifications.php?currentTime=\" +\r\n        unixTime(),\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        if (data[0] == \"CheckNotifications\") {\r\n          var i = 0;\r\n          for (i = 0; i < data.length; i++) {\r\n            var datas = data[i].split(\"~\");\r\n            if (!AlertStore.instance()._alerts.includes(datas[0])) {\r\n              if (unixTime() < Number(datas[1])) {\r\n                AlertStore.instance()._alerts.push(datas[0]);\r\n                console.log(\"Posting toast with provided parameters!\");\r\n                addToast(\"Alert posted at (\" + datas[4] + \"): \" + datas[0], {\r\n                  appearance: datas[2],\r\n                  autoDismiss: true,\r\n                  autoDismissTimeout: Number(datas[3]),\r\n                });\r\n              } else {\r\n                console.log(\r\n                  \"Number check error: \" + Number(datas[1]) + \"\\n\" + unixTime()\r\n                );\r\n              }\r\n            } else {\r\n              console.log(\"Already has alert\");\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    xhr.send();\r\n  };\r\n\r\n  SingleTimers.instance().add(timerCode, 5000, \"notification_checks\");\r\n\r\n  return null;\r\n};\r\n\r\nexport default ZDevNotifierCheck;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Account.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React, { useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Card,\r\n  Tabs,\r\n  Tab,\r\n  Modal,\r\n  Button,\r\n  Table,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport Search from \"./Search.js\";\r\nimport ProductsTab from \"./ProductsTab.js\";\r\nimport { Memory } from \"./MemorySingleton.js\";\r\n\r\nconst AccountPage = (props) => {\r\n  // Grab the user name, and level from the session data.\r\n  const { addToast } = useToasts();\r\n  const [UserName, setUser] = useState(\"\");\r\n  const [Level, setLevel] = useState(-2);\r\n  const unixTime = () => {\r\n    return Math.floor(Date.now() / 1000);\r\n  };\r\n  const [notifMaker, setNotifMaker] = useState(false);\r\n  const toggleNotificationModal = () => setNotifMaker(!notifMaker);\r\n  const [impersonate, setImpersonate] = useState(false);\r\n  const mem = new Memory();\r\n\r\n  var tmpUser = \"\";\r\n  var xhr = new XMLHttpRequest();\r\n  const processHTTP = () => {\r\n    if (xhr.readyState === 4) {\r\n      var data = xhr.responseText.split(\";;\");\r\n      if (data[0] == \"LoginSessionData\") {\r\n        if (data[1] == \"impersonation\") {\r\n          if (data[2] == \"n/a/n\") {\r\n            setTimeout(() => {\r\n              setImpersonate(false);\r\n            }, 2500);\r\n          } else {\r\n            setTimeout(() => {\r\n              setImpersonate(true);\r\n            }, 2500);\r\n          }\r\n          mem.Impersonate = impersonate;\r\n          setUser(mem.User);\r\n          setLevel(mem.Level);\r\n        }\r\n      } else if (data[0] == \"AdminActions\") {\r\n        if (data[1] == \"2\") {\r\n          addToast(\"Impersonation is not active\", {\r\n            appearance: \"error\",\r\n            autoDismiss: true,\r\n            autoDismissTimeout: 5000,\r\n          });\r\n          setTimeout(() => {\r\n            setImpersonate(false);\r\n            mem.Impersonate = false;\r\n          }, 5000);\r\n        } else if (data[1] == \"3\") {\r\n          addToast(\"Impersonation has ended\", {\r\n            appearance: \"success\",\r\n            autoDismiss: true,\r\n            autoDismissTimeout: 2500,\r\n          });\r\n          setTimeout(() => {\r\n            mem.Impersonate = false;\r\n            window.location = \"/account\";\r\n          }, 5000);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const rankName = () => {\r\n    if (Level == -1) return \"Account Suspended\";\r\n    else if (Level == 0) return \"Account Not Verified\";\r\n    else if (Level == 1) return \"User\";\r\n    else if (Level == 2) return \"Customer\";\r\n    else if (Level == 3) return \"ZNI Support\";\r\n    else if (Level == 4) return \"ZNI Operator\";\r\n    else if (Level == 5) return \"ZNI Owners\";\r\n  };\r\n  const runSessionFetch = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/SessionsData.php?var=impersonation&action=get\",\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.send();\r\n  };\r\n\r\n  const [deletePrompt, setDeletePrompt] = useState(false);\r\n  const toggleDeletePrompt = () => setDeletePrompt(!deletePrompt);\r\n\r\n  const deleteAction = () => {\r\n    if (impersonate) {\r\n      deimpersonate();\r\n      return;\r\n    }\r\n    xhr = new XMLHttpRequest();\r\n    addToast(\r\n      \"You are being logged out due to your account having been deleted.\",\r\n      {\r\n        appearance: \"success\",\r\n      }\r\n    );\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/RegisterAccount.php?ACTION=ResetUser&user=\" +\r\n        UserName,\r\n      false\r\n    );\r\n    xhr.send();\r\n\r\n    setTimeout(() => {\r\n      window.location = \"/logout\";\r\n    }, 5000);\r\n  };\r\n\r\n  const [noticeText, setNoticeText] = useState(\"\");\r\n  const handleNoticeText = (e) => {\r\n    setNoticeText(e.target.value);\r\n  };\r\n  const [noticeMinutes, setNoticeMinutes] = useState(30);\r\n  const handleNoticeMinutes = (e) => {\r\n    setNoticeMinutes(Number(e.target.value));\r\n  };\r\n\r\n  const [noticeDuration, setNoticeDuration] = useState(5);\r\n  const handleNoticeDuration = (e) => {\r\n    setNoticeDuration(Number(e.target.value));\r\n  };\r\n\r\n  const [noticeColor, setNoticeColor] = useState(\"\");\r\n  const handleNoticeColor = (e) => {\r\n    setNoticeColor(e.target.value);\r\n  };\r\n\r\n  const translateNoticeColor = () => {\r\n    if (noticeColor == \"Green\") return \"success\";\r\n    else return \"error\";\r\n  };\r\n\r\n  const deimpersonate = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/AdminActions.php?type=deimpersonate\",\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.send();\r\n  };\r\n\r\n  const doMakeNotification = () => {\r\n    // Send the notification data to the server then close this Form\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/MakeNotification.php\",\r\n      false\r\n    );\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    var params =\r\n      \"msg=\" +\r\n      encodeURI(noticeText) +\r\n      \"&until=\" +\r\n      (unixTime() + noticeMinutes * 60) +\r\n      \"&expire=\" +\r\n      noticeDuration * 1000 +\r\n      \"&color=\" +\r\n      translateNoticeColor();\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        if (data[0] == \"MakeNotification\") {\r\n          if (data[1] == \"0\") {\r\n            toggleNotificationModal();\r\n            addToast(\"Notification added to the server\", {\r\n              appearance: \"success\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          } else if (data[1] == \"1\") {\r\n            addToast(\r\n              \"Notification could not be scheduled. You may not have a high enough clearance level\",\r\n              {\r\n                appearance: \"error\",\r\n                autoDismiss: true,\r\n                autoDismissTimeout: 5000,\r\n              }\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    xhr.send(params);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <center>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item active>Account</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n        {Level == -2 && runSessionFetch()}\r\n        <Card style={{ width: \"64rem\", color: \"#00a5a5\" }}>\r\n          <Card.Body>\r\n            <Card.Title>{UserName}</Card.Title>\r\n            <Card.Subtitle className=\"mb-2 text-muted\">\r\n              Rank: {rankName()}\r\n            </Card.Subtitle>\r\n            <Card.Text style={{ color: \"black\" }}>\r\n              {impersonate && (\r\n                <Button variant=\"primary\" onClick={() => deimpersonate()}>\r\n                  Deimpersonate\r\n                </Button>\r\n              )}\r\n              <Tabs defaultActiveKey=\"home\">\r\n                {Level >= 1 && (\r\n                  <Tab eventKey=\"home\" title=\"Home\">\r\n                    <br />\r\n                    <Table stripped bordered hover variant=\"dark\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Description</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>Changes user password</td>\r\n                          <td>\r\n                            <Button\r\n                              variant=\"primary\"\r\n                              href=\"/account/new_password\"\r\n                            >\r\n                              Change\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>Deletes your account</td>\r\n                          <td>\r\n                            <Button\r\n                              variant=\"danger\"\r\n                              onClick={toggleDeletePrompt}\r\n                            >\r\n                              Delete It\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </Table>\r\n                  </Tab>\r\n                )}\r\n                {Level >= 2 && (\r\n                  <Tab eventKey=\"products\" title=\"Products\">\r\n                    <br />\r\n                    <ProductsTab />\r\n                  </Tab>\r\n                )}\r\n                {Level >= 3 && (\r\n                  <Tab eventKey=\"search\" title=\"Search\">\r\n                    <br />\r\n                    <Search />\r\n                  </Tab>\r\n                )}\r\n                {Level >= 4 && (\r\n                  <Tab eventKey=\"admin\" title=\"Operations\">\r\n                    <br />\r\n                    <strong>\r\n                      This tool allows you to perform various operator actions\r\n                      on the ZNI website. Please use caution.\r\n                    </strong>\r\n                    <br />\r\n                    <Table stripped bordered hover variant=\"dark\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Description</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>\r\n                            This action will send a site wide notification pop\r\n                            up. Parameters are configurable.\r\n                          </td>\r\n                          <td>\r\n                            <Button\r\n                              variant=\"primary\"\r\n                              onClick={toggleNotificationModal}\r\n                            >\r\n                              Show Wizard\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </Table>\r\n                  </Tab>\r\n                )}\r\n              </Tabs>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <Modal show={deletePrompt} onHide={toggleDeletePrompt}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              Are you sure you want to delete your account?\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            This action will only delete the login data associated with your\r\n            account. If you wish to fully delete your account including all\r\n            data, you will need to contact ZNI Support.\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"danger\" onClick={toggleDeletePrompt}>\r\n              Cancel\r\n            </Button>{\" \"}\r\n            <Button variant=\"primary\" onClick={deleteAction}>\r\n              Yes. Delete it.\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal show={notifMaker} onHide={toggleNotificationModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Notification Creation Wizard</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Label>Notice Text</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"This is the text displayed on the notice\"\r\n                  onChange={handleNoticeText}\r\n                  value={noticeText}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>Total Minutes</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder=\"30\"\r\n                  onChange={handleNoticeMinutes}\r\n                  value={noticeMinutes}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>Notice Duration (Seconds)</Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder=\"5\"\r\n                  onChange={handleNoticeDuration}\r\n                  value={noticeDuration}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Label>Notice Color</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  defaultValue=\"Choose ..\"\r\n                  onChange={handleNoticeColor}\r\n                  value={noticeColor}\r\n                >\r\n                  <option>Choose ..</option>\r\n                  <option>Green</option>\r\n                  <option>Red</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer>\r\n            <Button variant=\"danger\" onClick={toggleNotificationModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={doMakeNotification}>\r\n              Make Notification\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountPage;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Logout.js",[],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MemorySingleton.js",[],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MenuHandlers\\AccountMenu.js",[],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHManagerView.js",["210","211","212","213","214","215"],"import React, { useState } from \"react\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Breadcrumb,\r\n  Modal,\r\n  Col,\r\n  Table,\r\n  Image,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst CAHManagerView = (props) => {\r\n  const mem = new Memory();\r\n  const newDeck = () => {\r\n    setNewDeck(!newDeckx);\r\n  };\r\n  const [downloadDone, setDownloadDone] = useState(false);\r\n  const [decks, setDecks] = useState([]);\r\n  const [newDeckx, setNewDeck] = useState(false);\r\n  const [newDeckName, setNewDeckName] = useState(\"\");\r\n\r\n  var xhr = null;\r\n  const doDownload = () => {\r\n    if (downloadDone) return;\r\n\r\n    setDownloadDone(true);\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.zontreck.dev/zni/Modify_Card.php\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        if (data[0] == \"List_Decks\") {\r\n          setDecks(data[1].split(\"~\"));\r\n        }\r\n      }\r\n    });\r\n    var params = \"TYPE_OVERRIDE=LIST_DECKS\";\r\n\r\n    xhr.send(params);\r\n  };\r\n\r\n  const refresh = () => {\r\n    setDownloadDone(false);\r\n    doDownload();\r\n  };\r\n\r\n  doDownload();\r\n\r\n  const renderDecks = (entry, index) => {\r\n    // Renders the deck list!\r\n    return (\r\n      <tr>\r\n        <td>{entry}</td>\r\n        <td>\r\n          <Button href={\"/account/products/cah_manager/\" + entry}>Edit</Button>{\" \"}\r\n          <Button\r\n            href={\"/account/products/cah_manager/\" + entry + \"/script\"}\r\n            variant=\"danger\"\r\n          >\r\n            Get Script\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Cards Against Humanity</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <center>\r\n        <br />\r\n        <div style={{ width: \"50vw\", height: \"50vh\" }}>\r\n          <Card className=\"bg-dark text-white\">\r\n            <Card.Title>\r\n              Cards Against Humanity - ZNI Edition\r\n              <br />\r\n              Administrative Console\r\n              <div\r\n                style={{\r\n                  width: \"25%\",\r\n                  height: \"50%\",\r\n                  position: \"absolute\",\r\n                  right: 0,\r\n                  top: 10,\r\n                }}\r\n              >\r\n                <Button variant=\"info\" onClick={newDeck}>\r\n                  Create New Deck\r\n                </Button>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  width: \"25%\",\r\n                  height: \"50%\",\r\n                  position: \"absolute\",\r\n                  left: 0,\r\n                  top: 10,\r\n                }}\r\n              >\r\n                <Button\r\n                  variant=\"danger\"\r\n                  href={\"/account/products/cah_manager/_a/games/edit\"}\r\n                >\r\n                  Edit Active Games\r\n                </Button>\r\n              </div>\r\n            </Card.Title>\r\n            <Card.Body>\r\n              <br />\r\n              <Table hover variant=\"dark\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Deck Name</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {!downloadDone && refresh()}\r\n                  {decks.map(renderDecks)}\r\n                </tbody>\r\n              </Table>\r\n            </Card.Body>\r\n          </Card>\r\n          <Modal size=\"lg\" show={newDeckx} onHide={newDeck}>\r\n            <Modal.Header closeButton>\r\n              <h3>\r\n                <b>New Deck Wizard</b>\r\n              </h3>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Form>\r\n                <Form.Row>\r\n                  {\" \"}\r\n                  <Form.Label sm=\"2\">Deck Name: </Form.Label>\r\n                  <Col sm=\"6\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      value={newDeckName}\r\n                      onChange={(e) => setNewDeckName(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                  <Form.Label sm=\"2\">\r\n                    * NOTE * This deck will not be saved yet after clicking\r\n                    submit, you will be forwarded to the deck editor, after\r\n                    creating at least one card, it will appear in the table on\r\n                    the Deck List\r\n                  </Form.Label>\r\n                </Form.Row>\r\n              </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                href={\"/account/products/cah_manager/\" + newDeckName}\r\n                variant=\"success\"\r\n              >\r\n                Edit\r\n              </Button>{\" \"}\r\n              <Button onClick={newDeck} variant=\"danger\">\r\n                Cancel\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CAHManagerView;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\StoreEditor.js",["216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234"],"import React, { useState } from \"react\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport {\r\n  Button,\r\n  Breadcrumb,\r\n  Card,\r\n  Image,\r\n  Form,\r\n  Col,\r\n  Badge,\r\n  Modal,\r\n  Table,\r\n} from \"react-bootstrap\";\r\n\r\nconst StoreEditor = (props) => {\r\n  const { addToast } = useToasts();\r\n  const [storeName, setStoreName] = useState(props.match.params.storeName);\r\n  const [storeOwner, setOwner] = useState(\"\");\r\n  const [storeManagers, setManagers] = useState(\"\");\r\n  const [myUser, setMyUser] = useState(\"\");\r\n  const [storeLogo, setLogo] = useState(\"\");\r\n  const [DLSessionComplete, setDLComplete] = useState(false);\r\n  const [DLStoreComplete, setDLStoreComplete] = useState(false);\r\n\r\n  const [deleteStoreModal, setDeleteStoreModal] = useState(false);\r\n  const toggleDeleteStore = () => setDeleteStoreModal(!deleteStoreModal);\r\n\r\n  var xhr = new XMLHttpRequest();\r\n  const processHTTP = () => {\r\n    if (xhr.readyState === 4) {\r\n      var data = xhr.responseText.split(\";;\");\r\n      if (data[0] == \"LoginSessionData\") {\r\n        if (data[1] == \"user\") {\r\n          if (data[2] == \"n/a/n\") {\r\n            window.location = \"/login\";\r\n          } else {\r\n            setTimeout(() => {\r\n              setMyUser(data[2]);\r\n            }, 2500);\r\n          }\r\n        }\r\n      } else if (data[0] == \"Get_Store\") {\r\n        if (data[1] == \"0\") {\r\n          addToast(\"Store not found\", {\r\n            appearance: \"error\",\r\n            autoDismiss: false,\r\n          });\r\n          setTimeout(() => {\r\n            window.location = \"/account/products/stores\";\r\n          }, 5000);\r\n        } else if (data[1] == \"2\") {\r\n          addToast(\"Login is required\", {\r\n            appearance: \"error\",\r\n            autoDismiss: false,\r\n          });\r\n          setTimeout(() => {\r\n            window.location = \"/login\";\r\n          }, 5000);\r\n        } else if (data[1] == \"1\") {\r\n          var params = data[2].split(\";\");\r\n          setTimeout(() => {\r\n            setManagers(params[1]);\r\n          }, 1000);\r\n          setTimeout(() => {\r\n            setStoreName(params[0]);\r\n          }, 1500);\r\n          setTimeout(() => {\r\n            setLogo(params[2]);\r\n          }, 2000);\r\n          setTimeout(() => {\r\n            setOwner(params[3]);\r\n          }, 2500);\r\n        }\r\n      } else if (data[0] == \"Delete_Store\") {\r\n        if (data[1] == \"0\") {\r\n          addToast(\"Store Deleted\", { appearance: \"success\" });\r\n          setTimeout(() => {\r\n            window.location = \"/account/products/stores\";\r\n          }, 5000);\r\n        } else if (data[1] == \"1\") {\r\n          addToast(\"Store could not be deleted\", {\r\n            appearance: \"error\",\r\n            autoDismiss: true,\r\n            autoDismissTimeout: 5000,\r\n          });\r\n          toggleDeleteStore();\r\n        }\r\n      } else if (data[0] == \"Save_Store\") {\r\n        if (data[1] == \"0\") {\r\n          addToast(\"Store Updated\", {\r\n            appearance: \"success\",\r\n            autoDismiss: true,\r\n          });\r\n        } else if (data[1] == \"1\") {\r\n          addToast(\"Store Update Failure\", {\r\n            appearance: \"error\",\r\n            autoDismiss: true,\r\n            autoDismissTimeout: 10000,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const DLUserSession = () => {\r\n    if (DLSessionComplete) return;\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/SessionsData.php?action=get&var=user\",\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.send();\r\n\r\n    setDLComplete(true);\r\n  };\r\n\r\n  const DLStore = () => {\r\n    if (DLStoreComplete) return;\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/Get_Store.php?name=\" +\r\n        encodeURI(storeName),\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.send();\r\n\r\n    setDLStoreComplete(true);\r\n  };\r\n\r\n  if (!DLSessionComplete) DLUserSession();\r\n\r\n  if (!DLStoreComplete) DLStore();\r\n\r\n  const storeManagersAsList = () => {\r\n    return storeManagers.replace(\", \", \"\\n\");\r\n  };\r\n\r\n  const updateStoreManagerList = (e) => {\r\n    setManagers(e.target.value.replace(\"\\n\", \", \"));\r\n  };\r\n\r\n  const getUserType = () => {\r\n    var badgeColor = \"danger\";\r\n    var badgeText = \"Manager\";\r\n    if (myUser == storeOwner) {\r\n      badgeText = \"Store Owner\";\r\n      badgeColor = \"success\";\r\n    }\r\n\r\n    return (\r\n      <Badge pill variant={badgeColor}>\r\n        {badgeText}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const doDeleteStore = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/Delete_Store.php\",\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.send(\"name=\" + encodeURI(storeName));\r\n    addToast(\"Deletion in progress...\", {\r\n      appearance: \"success\",\r\n      autoDismiss: true,\r\n      autoDismissTimeout: 5000,\r\n    });\r\n  };\r\n\r\n  const saveChanges = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/Save_Store.php\",\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.send(\r\n      \"name=\" +\r\n        encodeURI(storeName) +\r\n        \"&managers=\" +\r\n        encodeURI(storeManagers) +\r\n        \"&logo=\" +\r\n        encodeURI(storeLogo) +\r\n        \"&originname=\" +\r\n        encodeURI(props.match.params.storeName)\r\n    );\r\n    addToast(\"Updating store...\", {\r\n      appearance: \"success\",\r\n      autoDismiss: true,\r\n      autoDismissTimeout: 5000,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account/products/stores\">\r\n          Stores\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>{storeName}</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <center>\r\n        <Card\r\n          style={{ width: \"50vw\" }}\r\n          variant=\"dark\"\r\n          className=\"bg-secondary text-white\"\r\n        >\r\n          <Card.Header>\r\n            <Image\r\n              src={\"https://secondlife.com/app/image/\" + storeLogo + \"/3\"}\r\n              rounded\r\n            />\r\n            {\" \" + storeName}\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Label>Store Owner: {storeOwner}</Form.Label>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Label sm=\"2\">My Access Level: </Form.Label>\r\n                <Col sm=\"2\">{getUserType()}</Col>\r\n              </Form.Row>\r\n              {myUser == storeOwner && (\r\n                <Form.Row>\r\n                  {\" \"}\r\n                  <Form.Label sm=\"2\">Store Name: </Form.Label>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      value={storeName}\r\n                      onChange={(e) => setStoreName(e.target.value)}\r\n                    />\r\n                  </Col>\r\n                </Form.Row>\r\n              )}\r\n              {myUser == storeOwner && (\r\n                <Form.Row>\r\n                  <Form.Label sm=\"2\">Store Logo: </Form.Label>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      value={storeLogo}\r\n                      onChange={(e) => setLogo(e.target.value)}\r\n                    />\r\n                  </Col>\r\n                </Form.Row>\r\n              )}\r\n              {myUser == storeOwner && (\r\n                <Form.Row>\r\n                  <Form.Label sm=\"2\">Store Managers: </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      value={storeManagersAsList()}\r\n                      onChange={updateStoreManagerList}\r\n                    />\r\n                  </Col>\r\n                </Form.Row>\r\n              )}\r\n            </Form>\r\n            <Table striped bordered hover variant=\"dark\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      href={\r\n                        \"/account/products/stores/\" + storeName + \"/products\"\r\n                      }\r\n                    >\r\n                      Product Manager\r\n                    </Button>{\" \"}\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      href={\r\n                        \"/account/products/stores/\" + storeName + \"/vendors\"\r\n                      }\r\n                    >\r\n                      Vendor Manager\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </Table>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            {myUser == storeOwner && (\r\n              <Button variant=\"danger\" onClick={toggleDeleteStore}>\r\n                Delete Store\r\n              </Button>\r\n            )}{\" \"}\r\n            {myUser == storeOwner && (\r\n              <Button variant=\"success\" onClick={saveChanges}>\r\n                Save\r\n              </Button>\r\n            )}\r\n          </Card.Footer>\r\n        </Card>\r\n        <Modal show={deleteStoreModal} onHide={toggleDeleteStore}>\r\n          <Modal.Header>Confirmation</Modal.Header>\r\n          <Modal.Body>\r\n            Are you sure you want to delete the store: {storeName}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"success\" onClick={toggleDeleteStore}>\r\n              Cancel\r\n            </Button>{\" \"}\r\n            <Button variant=\"danger\" onClick={doDeleteStore}>\r\n              Delete It\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreEditor;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\StoresPage.js",["235","236","237","238","239","240","241","242","243","244","245","246"],"import React, { useState } from \"react\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Table,\r\n  Badge,\r\n  Modal,\r\n  Col,\r\n  Image,\r\n  Breadcrumb,\r\n} from \"react-bootstrap\";\r\n\r\nconst StoresPage = () => {\r\n  const { addToast } = useToasts();\r\n  const [storeTable, setStoreTable] = useState([]);\r\n  const [hasStoreTable, setHasStoreTable] = useState(false);\r\n  const [IsLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [createStoreModal, setCreateStoreModal] = useState(false);\r\n  const [storeName, setStoreName] = useState(\"\");\r\n  const [selectedFile, setSelectedFile] = useState(\"\");\r\n  const [renderedStoreTable, setRenderedStoreTable] = useState(false);\r\n  const createStoreToggle = () => {\r\n    setCreateStoreModal(!createStoreModal);\r\n  };\r\n  const openStore = (e) => {\r\n    window.location = \"/account/products/stores/\" + encodeURI(e);\r\n  };\r\n  const submitNewStore = () => {\r\n    var params =\r\n      \"name=\" + encodeURI(storeName) + \"&logo=\" + encodeURI(selectedFile);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/Create_Store.php\",\r\n      true\r\n    );\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        if (data[0] == \"Create_Store\") {\r\n          if (data[1] == \"0\") {\r\n            addToast(\"Store created\", {\r\n              appearance: \"success\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n            createStoreToggle();\r\n            setTimeout(() => {\r\n              window.location = \"/account/products/stores\";\r\n            }, 2500);\r\n          } else if (data[1] == \"1\") {\r\n            addToast(\"Store could not be created\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 2500,\r\n            });\r\n          } else if (data[1] == \"2\") {\r\n            addToast(\"You must be logged in\", {\r\n              appearance: \"error\",\r\n              autoDismiss: false,\r\n            });\r\n            setTimeout(() => {\r\n              window.location = \"/login\";\r\n            }, 5000);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.send(params);\r\n  };\r\n  const createStoreTable = () => {\r\n    var retData = [];\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/List_Stores.php\",\r\n      false\r\n    );\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        for (var i = 1; i < data.length; i++) {\r\n          var entry = data[i].split(\";\");\r\n          if (data[i] == \"\") return;\r\n          for (var i = 0; i < entry.length; i++) {\r\n            var theData = entry[i].split(\"~\");\r\n            var badgeColor = \"\";\r\n            var badgeText = \"\";\r\n            if (theData[1] == \"n\") {\r\n              badgeColor = \"danger\";\r\n              badgeText = \"Manager\";\r\n            } else {\r\n              badgeColor = \"success\";\r\n              badgeText = \"Owner\";\r\n            }\r\n            retData.push({\r\n              store: theData[0],\r\n              color: badgeColor,\r\n              text: badgeText,\r\n              logo: theData[2],\r\n            });\r\n\r\n            console.log(\r\n              \"Stores entry: \" +\r\n                theData +\r\n                \";;;;\" +\r\n                badgeText +\r\n                \"~\" +\r\n                badgeColor +\r\n                \"~\" +\r\n                theData[0]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    xhr.send();\r\n\r\n    setStoreTable(retData);\r\n    if (!hasStoreTable) setHasStoreTable(true);\r\n  };\r\n\r\n  const renderStores = (entry, index) => {\r\n    //console.log(\"Entry render: \" + JSON.stringify(entry));\r\n    return (\r\n      <tr key={index}>\r\n        <td>\r\n          <Image\r\n            src={\"https://secondlife.com/app/image/\" + entry.logo + \"/3\"}\r\n            rounded\r\n          />\r\n          {entry.store}{\" \"}\r\n          <Badge pill variant={entry.color}>\r\n            {entry.text}\r\n          </Badge>\r\n        </td>\r\n        <td>\r\n          <Button\r\n            onClick={() => {\r\n              openStore(entry.store);\r\n            }}\r\n            variant={entry.color}\r\n          >\r\n            Open\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n  const checkLoginStatus = () => {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/SessionsData.php?var=user&action=get\",\r\n      false\r\n    );\r\n    setIsLoggedIn(true);\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var data = xhr.responseText.split(\";;\");\r\n        if (data[0] == \"LoginSessionData\") {\r\n          if (data[1] == \"user\") {\r\n            if (data[2] == \"n/a/n\") {\r\n              window.location = \"/login\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    xhr.send();\r\n  };\r\n  return (\r\n    <center>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Stores</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {!IsLoggedIn && checkLoginStatus()}\r\n      <br />\r\n      <div style={{ width: \"50vw\", height: \"50vh\" }}>\r\n        <Card className=\"bg-dark text-white\">\r\n          <Card.Title>\r\n            Store System\r\n            <div\r\n              style={{\r\n                width: \"50%\",\r\n                height: \"100%\",\r\n                position: \"absolute\",\r\n                left: 0,\r\n                top: 0,\r\n              }}\r\n            >\r\n              <Button variant=\"info\" onClick={createStoreToggle}>\r\n                Create New Store\r\n              </Button>\r\n            </div>\r\n          </Card.Title>\r\n          <Card.Body>\r\n            <br />\r\n            <Table hover variant=\"dark\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Store Name</th>\r\n                  <th>Link</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {!hasStoreTable && createStoreTable()}\r\n                {storeTable.map(renderStores)}\r\n              </tbody>\r\n            </Table>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n      <Modal show={createStoreModal} onHide={createStoreToggle}>\r\n        <Modal.Header closeButton>Create a new Store</Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Label sm=\"2\">Store Name: </Form.Label>{\" \"}\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  onChange={(e) => setStoreName(e.target.value)}\r\n                />\r\n              </Col>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Label sm=\"2\">Store Logo UUID: </Form.Label>{\" \"}\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  onChange={(e) => setSelectedFile(e.target.value)}\r\n                />\r\n              </Col>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Label sm=\"2\">Preview: </Form.Label>\r\n              <Col sm=\"10\">\r\n                <Image\r\n                  src={\r\n                    \"https://secondlife.com/app/image/\" + selectedFile + \"/1\"\r\n                  }\r\n                  rounded\r\n                />\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={createStoreToggle}>\r\n            Cancel\r\n          </Button>{\" \"}\r\n          <Button variant=\"success\" onClick={submitNewStore}>\r\n            Create\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </center>\r\n  );\r\n};\r\n\r\nexport default StoresPage;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\OpenSimulatorManager.js",["247","248","249"],"import React, { useState } from \"react\";\r\nimport { Breadcrumb, Card, Form, Col, Button, Modal } from \"react-bootstrap\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst OpenSimManager = (props) => {\r\n  const { addToast } = useToasts();\r\n  const mem = new Memory();\r\n  const [createWindow, setCreateWindow] = useState(false);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(0);\r\n  const [accountID, setUUID] = useState(\"\");\r\n  const [accountPassword, setAccountPassword] = useState(\"\");\r\n  const [resetToken, setResetToken] = useState(\"\");\r\n  const toggleCreateWindow = () => {\r\n    setCreateWindow(!createWindow);\r\n  };\r\n\r\n  const generate_id = () => {\r\n    return uuidv4();\r\n  };\r\n\r\n  const makeAccount = () => {\r\n    setFirstName(\"First\");\r\n    setLastName(0);\r\n    setUUID(generate_id);\r\n    setAccountPassword(\"\");\r\n    setResetToken(generate_id);\r\n\r\n    setCreateWindow(true);\r\n  };\r\n\r\n  const doRegister = () => {\r\n    addToast(\"Creating account : \" + firstName + \" \" + lastName, {\r\n      appearance: \"error\",\r\n      autoDismiss: true,\r\n      autoDismissTimeout: 5000,\r\n    });\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/OpenSim/Register.php\",\r\n      false\r\n    );\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    var params =\r\n      \"first=\" +\r\n      encodeURI(firstName) +\r\n      \"&last=\" +\r\n      encodeURI(lastName) +\r\n      \"&id=\" +\r\n      encodeURI(accountID) +\r\n      \"&pass=\" +\r\n      encodeURI(accountPassword) +\r\n      \"&token=\" +\r\n      encodeURI(resetToken);\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var par = xhr.responseText.split(\";;\");\r\n        if (par[0] == \"Register\") {\r\n          if (par[1] == \"OK\") {\r\n            addToast(\"Account Created\", {\r\n              appearance: \"success\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          } else if (par[1] == \"FAIL\") {\r\n            addToast(\"Account not created\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 5000,\r\n            });\r\n          }\r\n\r\n          toggleCreateWindow();\r\n        }\r\n      }\r\n    });\r\n    xhr.send(params);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <center>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n          <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n          <Breadcrumb.Item active>OpenSim</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n\r\n        <Card\r\n          className=\"bg-dark text-white\"\r\n          style={{ width: \"75vw\", height: \"75vh\" }}\r\n        >\r\n          <Card.Header>OpenSimulator Manager</Card.Header>\r\n          <Card.Body>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Label sm=\"6\">Need a new account?</Form.Label>\r\n                <Col sm=\"5\">\r\n                  <Button variant=\"success\" onClick={makeAccount}>\r\n                    Create an Account\r\n                  </Button>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Label sm=\"6\">Password Reset</Form.Label>\r\n                <Col sm=\"5\">\r\n                  <Button variant=\"danger\">Reset Password</Button>\r\n                </Col>\r\n              </Form.Row>\r\n              {mem.Level >= 3 && (\r\n                <Form.Row>\r\n                  <Form.Label sm=\"6\">User Account Management</Form.Label>\r\n                  <Col sm=\"5\">\r\n                    <Button variant=\"success\">Manager</Button>\r\n                  </Col>\r\n                </Form.Row>\r\n              )}\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n        <Modal size=\"lg\" onHide={toggleCreateWindow} show={createWindow}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Register Account</Modal.Title>{\" \"}\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Row>\r\n                <Form.Label sm=\"2\">Account UUID: {accountID}</Form.Label>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Label sm=\"2\">First Name</Form.Label>\r\n                <Col sm=\"10\">\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    onChange={(e) => setFirstName(e.target.value)}\r\n                    value={firstName}\r\n                  />\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Label sm=\"2\">Last Name</Form.Label>\r\n                <Col sm=\"8\">\r\n                  {\" \"}\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    onChange={(e) => setLastName(e.target.value)}\r\n                    value={lastName}\r\n                  >\r\n                    <option>Select a last Name</option>\r\n                    <option>Apple</option>\r\n                    <option>ShiverSpring</option>\r\n                    <option>Soupmaker</option>\r\n                    <option>Security</option>\r\n                    <option>Son</option>\r\n                    <option>Storyteller</option>\r\n                    {mem.Level >= 4 && <option>SuperSpell</option>}\r\n                    {mem.Level >= 5 && <option>SillySpring</option>}\r\n                  </Form.Control>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Label sm=\"2\">Password</Form.Label>\r\n                <Col sm=\"10\">\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    value={accountPassword}\r\n                    onChange={(e) => setAccountPassword(e.target.value)}\r\n                  ></Form.Control>\r\n                </Col>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                <Form.Label sm=\"2\">Reset Token (write this down): </Form.Label>\r\n                <Col sm=\"8\">\r\n                  <Form.Label>{resetToken}</Form.Label>\r\n                </Col>\r\n              </Form.Row>\r\n              <br />\r\n              <Form.Row>\r\n                <Form.Label>\r\n                  Because we do not use emails on this grid, if you forget your\r\n                  password, you will need your reset token or to email the\r\n                  system admin @{\" \"}\r\n                  <a href=\"mailto:tarapiccari@gmail.com\">\r\n                    Administrator : tarapiccari@gmail.com\r\n                  </a>\r\n                  <br />\r\n                  Your Account ID and Reset Token are generated the moment you\r\n                  open this form, however they are not saved until you complete\r\n                  the account registration process.\r\n                  <br />\r\n                  <br />\r\n                  If you would like to request custom last names to be added to\r\n                  our list, you may put in a request with the system\r\n                  administrator. This list is only rotated every so often. It is\r\n                  not maintained on a regular basis.\r\n                </Form.Label>\r\n              </Form.Row>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"danger\" onClick={toggleCreateWindow}>\r\n              Cancel\r\n            </Button>{\" \"}\r\n            <Button variant=\"primary\" onClick={doRegister}>\r\n              Register Account\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OpenSimManager;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\StoreProductsView.js",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Form,\n  Card,\n  Breadcrumb,\n  Modal,\n  Col,\n  Table,\n  Image,\n  Spinner,\n} from \"react-bootstrap\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst StoreProductsView = (props) => {\n  const { addToast } = useToasts();\n  const [storeName, setStoreName] = useState(props.match.params.storeName);\n  const [storeOwner, setStoreOwner] = useState(\"\");\n  const [DLUserComplete, setDLUserComplete] = useState(false);\n  const [productName, setProductName] = useState(\"\");\n  const [productPrice, setProductPrice] = useState(0);\n  const [productTexture, setProductTexture] = useState(\"\");\n  const [productEditor, setProductEditorVisible] = useState(false);\n  const [productDescription, setProductDescription] = useState(\"\");\n  const [profitSplits, setProfitSplits] = useState([]);\n  const [productID, setProductID] = useState(\"\");\n  const [productInventory, setProductInventory] = useState([]);\n  const [productVendorItem, setVendorItem] = useState(\"\");\n  const [productList, setProductList] = useState([]);\n  const [DLListComplete, setDLListComplete] = useState(false);\n\n  const toggleProductEditor = () => setProductEditorVisible(!productEditor);\n\n  var xhr = new XMLHttpRequest();\n\n  const processHTTP = () => {\n    if (xhr.readyState === 4) {\n      var datas = xhr.responseText.split(\";;\");\n      if (datas[0] == \"Get_Store\") {\n        if (datas[1] == \"1\") {\n          var dx = datas[2].split(\";\");\n\n          setTimeout(() => {\n            setStoreName(dx[0]);\n          }, 1000);\n          setTimeout(() => {\n            setStoreOwner(dx[3]);\n          }, 1500);\n        }\n      } else if (datas[0] == \"Save_Product\") {\n        if (datas[1] == \"0\") {\n          addToast(\"Product Update Completed\", { appearance: \"success\" });\n          setTimeout(() => {\n            window.location =\n              \"/account/products/stores/\" + storeName + \"/products\";\n          }, 2500);\n        } else if (datas[1] == \"1\") {\n          addToast(\"Product Update Failure\", {\n            appearance: \"error\",\n            autoDismiss: true,\n            autoDismissTimeout: 5000,\n          });\n        } else if (datas[1] == \"2\") {\n          window.location = \"/login\";\n        }\n      } else if (datas[0] == \"List_Dropbox_Inventory\") {\n        setProductInventory(datas[1].split(\"~^\"));\n      } else if (datas[0] == \"List_Products\") {\n        var d2 = datas[1].split(\";\");\n        var d4 = [];\n        if (datas[1] == \"\") {\n          setProductList([]);\n          return;\n        }\n        for (var i = 0; i < d2.length; i++) {\n          var d3 = d2[i].split(\"~\");\n          var dx = [];\n          dx.price = d3[3];\n          dx.description = d3[4];\n          dx.productName = d3[2];\n          dx.texture = d3[6];\n          dx.item = d3[7];\n          dx.id = d3[1];\n\n          d4.push(dx);\n        }\n\n        setProductList(d4);\n      } else if (datas[0] == \"Delete_Product\") {\n        if (datas[1] == \"2\") window.location = \"/login\";\n        else if (datas[1] == \"1\") {\n          addToast(\"Failed to Delete product\", {\n            appearance: \"error\",\n            autoDismiss: true,\n            autoDismissTimeout: 5000,\n          });\n        } else if (datas[1] == \"0\") {\n          addToast(\n            <div>\n              <Spinner variant=\"danger\" animation=\"border\" size=\"sm\"></Spinner>\n              Product Deleted.. Refreshing\n            </div>,\n            {\n              appearance: \"success\",\n              autoDismiss: true,\n              autoDismissTimeout: 5000,\n            }\n          );\n          setTimeout(() => refreshProductList(), 1000);\n        }\n      } else if (datas[0] == \"Get_Product\") {\n        if (datas[1] == \"2\") window.location = \"/login\";\n        else if (datas[1] == \"1\") {\n          addToast(\"Product retrieval failure\", {\n            appearance: \"error\",\n            autoDismiss: true,\n            autoDismissTimeout: 5000,\n          });\n        } else if (datas[1] == \"0\") {\n          addToast(\n            <div>\n              <Spinner variant=\"danger\" animation=\"border\" size=\"sm\"></Spinner>\n              Populating product editor\n            </div>,\n            {\n              appearance: \"success\",\n              autoDismiss: true,\n              autoDismissTimeout: 5000,\n            }\n          );\n          refreshInventoryList();\n          var dx = datas[2].split(\";\");\n          setTimeout(() => {\n            setProductID(dx[0]);\n            setProductName(dx[1]);\n            setProductPrice(dx[2]);\n            setProfitSplits(JSON.parse(dx[3]));\n            setProductTexture(dx[4]);\n            setProductDescription(dx[5]);\n            setVendorItem(dx[6]);\n          }, 1000);\n\n          setTimeout(() => {\n            setProductEditorVisible(true);\n          }, 5000);\n        }\n      }\n    }\n  };\n  const DLUser = () => {\n    if (DLUserComplete) return;\n\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/Get_Store.php?name=\" +\n        encodeURI(storeName),\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n\n    setDLUserComplete(true);\n  };\n\n  const refreshInventoryList = () => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/List_DropboxInventory_ByAccount.php?user=\" +\n        encodeURI(storeOwner),\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n  };\n\n  const newProduct = () => {\n    // Open the product editor window\n    setTimeout(() => {\n      setProductName(\"New Product\");\n    }, 1000);\n\n    setTimeout(() => {\n      setProductPrice(0);\n    }, 1500);\n\n    setTimeout(() => {\n      setProductDescription(\"\");\n    }, 2000);\n\n    setTimeout(() => {\n      setProductTexture(\"\");\n    }, 2500);\n\n    setTimeout(() => {\n      setProfitSplits([{ user: storeOwner, percent: 100 }]);\n    }, 3000);\n\n    setTimeout(() => {\n      setProductID(generate_id());\n    }, 3500);\n\n    setTimeout(() => {\n      refreshInventoryList();\n    }, 4000);\n\n    setTimeout(() => {\n      setVendorItem(\"Choose ..\");\n    }, 4500);\n\n    setProductEditorVisible(true);\n\n    addToast(\n      <div>\n        <Spinner animation=\"border\" variant=\"danger\" size=\"sm\"></Spinner>\n        Generating new product data...\n      </div>,\n      { appearance: \"success\", autoDismiss: true, autoDismissTimeout: 5000 }\n    );\n  };\n\n  if (!DLUserComplete) DLUser();\n\n  const renderSplits = (entry, index) => {\n    return (\n      <tr key={index}>\n        <td>\n          <Form.Control\n            type=\"text\"\n            value={entry.user}\n            onChange={(e) => updateProfitSplit(\"user\", index, e.target.value)}\n          ></Form.Control>\n        </td>\n        <td>\n          <Form.Control\n            type=\"text\"\n            value={entry.percent}\n            onChange={(e) =>\n              updateProfitSplit(\"percent\", index, e.target.value)\n            }\n          ></Form.Control>\n        </td>\n        <td>\n          <Button variant=\"danger\" onClick={() => removeProfitSplit(index)}>\n            Remove\n          </Button>\n        </td>\n      </tr>\n    );\n  };\n\n  const updateProfitSplit = (type, index, value) => {\n    var split = [...profitSplits];\n    if (type == \"user\") split[index].user = value;\n    else if (type == \"percent\") split[index].percent = value;\n\n    setProfitSplits(split);\n  };\n\n  const removeProfitSplit = (index) => {\n    var tmp = [...profitSplits];\n    tmp.splice(index, 1);\n    setProfitSplits(tmp);\n  };\n\n  const newProfitSplit = () => {\n    var split = [...profitSplits];\n    split.push({ user: \"\", percent: 0 });\n    setProfitSplits(split);\n  };\n  const saveProduct = () => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"POST\",\n      \"https://api.zontreck.dev/zni/Save_Product.php\",\n      false\n    );\n    var params =\n      \"store=\" +\n      encodeURI(storeName) +\n      \"&name=\" +\n      encodeURI(productName) +\n      \"&id=\" +\n      encodeURI(productID) +\n      \"&price=\" +\n      encodeURI(productPrice) +\n      \"&description=\" +\n      encodeURI(productDescription) +\n      \"&profit_shares=\" +\n      encodeURI(JSON.stringify(profitSplits)) +\n      \"&vendor_item=\" +\n      encodeURI(productVendorItem) +\n      \"&texture=\" +\n      encodeURI(productTexture) +\n      \"&user=\" +\n      encodeURI(storeOwner);\n\n    console.log(\n      \"POST URL: https://api.zontreck.dev/zni/Save_Product.php\\n\\nData: \" +\n        params\n    );\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send(params);\n  };\n\n  const generate_id = () => {\n    return uuidv4();\n  };\n\n  const renderInventoryList = (entry, index) => {\n    return <option>{entry}</option>;\n  };\n\n  const handleInventoryChange = (e) => {\n    setVendorItem(e.target.value);\n  };\n\n  const renderProductList = (entry, index) => {\n    return (\n      <div>\n        <Card body>\n          <Form.Row>\n            <Col sm=\"3\">\n              <Image\n                src={\"https://secondlife.com/app/image/\" + entry.texture + \"/1\"}\n                rounded\n              />\n            </Col>{\" \"}\n            <Col sm=\"6\">\n              <Card className=\"bg-secondary text-white\">\n                <Card.Header>{entry.productName}</Card.Header>\n                <Card.Body>\n                  Price: L$ {entry.price}\n                  <br /> Description: {entry.description}\n                  <br />\n                  Item: <span style={{ color: \"#66ccff\" }}>{entry.item}</span>\n                </Card.Body>\n                <Card.Footer>\n                  <Button\n                    variant=\"danger\"\n                    onClick={() => deleteProduct(entry.id)}\n                  >\n                    Delete Product\n                  </Button>{\" \"}\n                  <Button\n                    variant=\"success\"\n                    onClick={() => editProduct(entry.id)}\n                  >\n                    Edit Product\n                  </Button>\n                </Card.Footer>\n              </Card>\n            </Col>\n          </Form.Row>\n        </Card>\n        <br />\n        <br />\n      </div>\n    );\n  };\n\n  const deleteProduct = (id) => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/Delete_Product.php?id=\" + id,\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n  };\n\n  const editProduct = (id) => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/Get_Product.php?id=\" + id,\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n  };\n\n  const refreshProductList = () => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/List_Products.php?store=\" +\n        storeName,\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n\n    setDLListComplete(true);\n  };\n\n  if (!DLListComplete) refreshProductList();\n\n  return (\n    <div>\n      <center>\n        <Breadcrumb>\n          <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n          <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\n          <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\n          <Breadcrumb.Item href=\"/account/products/stores\">\n            Stores\n          </Breadcrumb.Item>\n          <Breadcrumb.Item href={\"/account/products/stores/\" + storeName}>\n            {storeName}\n          </Breadcrumb.Item>\n          <Breadcrumb.Item active>Products Manager</Breadcrumb.Item>\n        </Breadcrumb>\n        <Card\n          className=\"bg-dark text-white\"\n          style={{ width: \"80vw\", textAlign: \"left\" }}\n        >\n          <Card.Header>\n            {storeName} - Products Manager\n            <Button\n              variant=\"success\"\n              onClick={newProduct}\n              style={{ position: \"absolute\", right: 10 }}\n            >\n              +\n            </Button>{\" \"}\n            <Button\n              variant=\"danger\"\n              onClick={refreshProductList}\n              style={{ position: \"absolute\", right: 50 }}\n            >\n              ↺\n            </Button>\n          </Card.Header>\n          <Card.Body>{productList.map(renderProductList)}</Card.Body>\n          <Card.Footer>Store Owner: {storeOwner}</Card.Footer>\n        </Card>\n      </center>\n      <Modal size=\"lg\" show={productEditor} onHide={toggleProductEditor}>\n        <Modal.Header closeButton>Product Editor - {productName}</Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Row>\n              <Form.Label sm=\"2\">Product Name: </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"text\"\n                  value={productName}\n                  onChange={(e) => setProductName(e.target.value)}\n                />\n              </Col>\n            </Form.Row>\n            <Form.Row>\n              <Form.Label sm=\"2\">Product ID: {productID}</Form.Label>\n            </Form.Row>\n            <Form.Row>\n              <Form.Label sm=\"2\">Vendor gives item: </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  as=\"select\"\n                  defaultValue=\"Choose ..\"\n                  onChange={handleInventoryChange}\n                  value={productVendorItem}\n                >\n                  <option>Choose ..</option>\n                  {productInventory.map(renderInventoryList)}\n                </Form.Control>\n              </Col>\n            </Form.Row>\n            <Form.Row>\n              <Form.Label sm=\"2\">Product Texture: </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"text\"\n                  value={productTexture}\n                  onChange={(e) => setProductTexture(e.target.value)}\n                />\n              </Col>\n            </Form.Row>\n            <Form.Row>\n              <Image\n                src={\n                  \"https://secondlife.com/app/image/\" +\n                  (productTexture == \"\"\n                    ? \"c1cc4102-1622-8f8d-da35-ad599801bbe5\"\n                    : productTexture) +\n                  \"/2\"\n                }\n                rounded\n              />\n            </Form.Row>\n            <Form.Row>\n              <Form.Label sm=\"2\">Product Price: </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"number\"\n                  value={productPrice}\n                  onChange={(e) => setProductPrice(e.target.value)}\n                />\n              </Col>\n            </Form.Row>\n            <Form.Row>\n              <Form.Label sm=\"2\">Description</Form.Label>\n              <Col sm=\"10\">\n                <Form.Control\n                  as=\"textarea\"\n                  value={productDescription}\n                  onChange={(e) => setProductDescription(e.target.value)}\n                />\n              </Col>\n            </Form.Row>\n            <br />\n            <Form.Row>\n              <Form.Label sm=\"2\">Profit Splits</Form.Label>\n              <Col sm=\"8\">\n                <Button variant=\"success\" onClick={newProfitSplit}>\n                  +\n                </Button>\n                <Table striped bordered hover variant=\"secondary\">\n                  <thead>\n                    <tr>\n                      <th>Avatar</th>\n                      <th>Percentage</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>{profitSplits.map(renderSplits)}</tbody>\n                </Table>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={toggleProductEditor}>\n            Cancel\n          </Button>\n          <Button variant=\"success\" onClick={saveProduct}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default StoreProductsView;\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\VendorView.js",["272","273","274","275","276","277","278","279","280","281","282","283"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Breadcrumb,\n  Card,\n  Image,\n  Col,\n  Form,\n  Modal,\n} from \"react-bootstrap\";\nimport { useToasts } from \"react-toast-notifications\";\n\nconst VendorView = (props) => {\n  const { addToast } = useToasts();\n  const [storeName, setStoreName] = useState(props.match.params.storeName);\n  const [storeOwner, setStoreOwner] = useState(\"-not_loaded-\");\n  const [DLStoreComplete, setDLStoreComplete] = useState(false);\n  const [DLVendors, setDLVendors] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const [DLProducts, setDLProducts] = useState(false);\n  const [products, setProducts] = useState([]);\n  const [editor, setEditor] = useState(false);\n  const toggleEditor = () => setEditor(!editor);\n  const [vendorOnline, setVendorOnline] = useState(false);\n  const [vendorProductNames, setVendorProductNames] = useState([]);\n  const [vendorProductIDs, setVendorProductIDs] = useState([]);\n  const [vendorProductName, setVendorProductName] = useState(\"\");\n  const [vendorIndex, setVendorIndex] = useState(0);\n\n  var xhr = new XMLHttpRequest();\n  const processHTTP = () => {\n    if (xhr.readyState === 4) {\n      var datas = xhr.responseText.split(\";;\");\n      if (datas[0] == \"Get_Store\") {\n        if (datas[1] == \"1\") {\n          var dx = datas[2].split(\";\");\n\n          setTimeout(() => {\n            setStoreName(dx[0]);\n          }, 1000);\n          setTimeout(() => {\n            setStoreOwner(dx[3]);\n          }, 1500);\n        }\n      } else if (datas[0] == \"List_Vendors\") {\n        var seg = datas[1].split(\"~\");\n        var vendTmp = [];\n        for (var i = 0; i < seg.length; i++) {\n          var theVendor = seg[i].split(\"|\");\n          var theVend = [];\n          theVend.id = theVendor[0];\n          theVend.region = theVendor[1];\n          theVend.enabled = theVendor[2];\n          theVend.affiliate = theVendor[3];\n          theVend.url = theVendor[4];\n          theVend.product = theVendor[5];\n          theVend.owner = theVendor[6];\n          theVend.store = theVendor[7];\n\n          vendTmp.push(theVend);\n        }\n\n        setVendors(vendTmp);\n      } else if (datas[0] == \"List_Products\") {\n        var segments = datas[1].split(\";\");\n\n        var prodLst = [];\n        var nmLst = [];\n        var idLst = [];\n        for (var i = 0; i < segments.length; i++) {\n          var product = segments[i].split(\"~\");\n          var actualProduct = [];\n\n          actualProduct.store = product[0];\n          actualProduct.id = product[1];\n          actualProduct.name = product[2];\n          actualProduct.price = product[3];\n          actualProduct.description = product[4];\n          actualProduct.splits = product[5];\n          actualProduct.texture = product[6];\n          actualProduct.item = product[7];\n\n          nmLst.push(actualProduct.name);\n          idLst.push(actualProduct.id);\n\n          prodLst[actualProduct.id] = actualProduct;\n        }\n\n        setProducts(prodLst);\n        setVendorProductIDs(idLst);\n        setVendorProductNames(nmLst);\n      } else if (datas[0] == \"Update_Vendor\") {\n        if (datas[1] == \"0\") {\n          addToast(\"Vendor updated. Pinging with a refresh signal\", {\n            appearance: \"success\",\n            autoDismiss: true,\n            autoDismissTimeout: 5000,\n          });\n\n          xhr = new XMLHttpRequest();\n          xhr.open(\n            \"POST\",\n            \"https://api.zontreck.dev/zni/RelayHTTP.php\",\n            false\n          );\n          var para =\n            \"url=\" +\n            encodeURI(vendors[vendorIndex].url) +\n            \"&data=\" +\n            btoa(\"refresh\") +\n            \"&method=POST\";\n\n          xhr.setRequestHeader(\n            \"Content-Type\",\n            \"application/x-www-form-urlencoded\"\n          );\n          xhr.addEventListener(\"load\", processHTTP);\n          xhr.send(para);\n\n          toggleEditor();\n          refreshVendorList();\n        } else if (datas[1] == \"1\") {\n          addToast(\"Unknown error occured during update. Changes not applied\", {\n            appearance: \"error\",\n            autoDismiss: true,\n            autoDismissTimeout: 5000,\n          });\n        }\n      } else if (datas[0] == \"LSVendor\") {\n        // request has completed!\n      } else if (datas[0] == \"LoginSessionData\") {\n        if (datas[1] == \"user\") {\n          if (datas[2] == \"n/a/n\") {\n            window.location = \"/login\";\n          } else {\n            xhr = new XMLHttpRequest();\n            xhr.open(\n              \"POST\",\n              \"https://api.zontreck.dev/zni/RelayHTTP.php\",\n              false\n            );\n            var params =\n              \"url=\" +\n              encodeURI(vendors[vendorIndex].url) +\n              \"&data=\" +\n              btoa(\"test_vend;;\" + datas[2]) +\n              \"&method=POST\";\n            xhr.setRequestHeader(\n              \"Content-Type\",\n              \"application/x-www-form-urlencoded\"\n            );\n            xhr.send(params);\n          }\n        }\n      }\n    }\n  };\n\n  if (!DLStoreComplete) {\n    setDLStoreComplete(true);\n\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/Get_Store.php?name=\" + storeName,\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n  }\n\n  const refreshVendorList = () => {\n    setDLProducts(false);\n    doDLProducts();\n    setDLVendors(false);\n    doDLVendors();\n  };\n\n  const doDLProducts = () => {\n    if (DLProducts) return;\n\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/List_Products.php?store=\" +\n        encodeURI(storeName),\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n\n    setDLProducts(true);\n  };\n\n  const doDLVendors = () => {\n    if (DLVendors) return;\n    // ask server for vendor listing\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/List_Vendors_ByStore.php?store=\" +\n        encodeURI(storeName),\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n\n    setDLVendors(true);\n  };\n\n  if (!DLProducts) doDLProducts();\n  if (!DLVendors) doDLVendors();\n\n  const renderVendorsList = (entry, index) => {\n    return (\n      <div key={index}>\n        <Card\n          className=\"bg-secondary text-white\"\n          style={{ width: \"90%\", textAlign: \"left\" }}\n        >\n          <Card.Header>\n            Vendor @ {entry.region} - {products[entry.product].name}\n          </Card.Header>\n          <Card.Body>\n            <Form.Row>\n              <Col sm=\"3\">\n                <Image\n                  src={\n                    \"https://secondlife.com/app/image/\" +\n                    products[entry.product].texture +\n                    \"/1\"\n                  }\n                  rounded\n                />\n              </Col>\n              <Col sm=\"8\">\n                {\" \"}\n                <Card className=\"bg-dark text-white\" style={{ width: \"90%\" }}>\n                  <Card.Header>Vendor ID: {entry.id}</Card.Header>\n                  <Card.Body>\n                    Product: {products[entry.product].name}\n                    <br />\n                    Price: L$ {products[entry.product].price}\n                    <br />\n                    Description: {products[entry.product].description}\n                  </Card.Body>\n                  <Card.Footer>\n                    <Button variant=\"success\" onClick={() => EditVendor(index)}>\n                      Edit Vendor\n                    </Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n            </Form.Row>\n          </Card.Body>\n        </Card>\n        <br />\n      </div>\n    );\n  };\n\n  const EditVendor = (zVendorIndex) => {\n    // Pulls up the vendor editor\n    setVendorOnline(vendors[zVendorIndex].enabled);\n    setVendorIndex(zVendorIndex);\n    var productID = vendors[zVendorIndex].product;\n    setVendorProductName(products[productID].name);\n\n    setTimeout(() => {\n      toggleEditor();\n    }, 500);\n  };\n\n  const renderProductChoices = (entry, index) => {\n    //console.log(\"ENTRY: \"+entry);\n    return <option key={index}>{entry}</option>;\n  };\n\n  const handleNewVendorProduct = (e) => {\n    setVendorProductName(e.target.value);\n  };\n\n  const doSaveVendorData = () => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"POST\",\n      \"https://api.zontreck.dev/zni/Update_Vendor_WithConfig.php\",\n      false\n    );\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    var params =\n      \"ID=\" +\n      vendors[vendorIndex].id +\n      \"&region=\" +\n      encodeURI(vendors[vendorIndex].region) +\n      \"&affiliate=\" +\n      vendors[vendorIndex].affiliate +\n      \"&url=\" +\n      encodeURI(vendors[vendorIndex].url) +\n      \"&product=\" +\n      encodeURI(\n        vendorProductIDs[vendorProductNames.indexOf(vendorProductName)]\n      ) +\n      \"&obj_owner=\" +\n      vendors[vendorIndex].owner +\n      \"&store=\" +\n      encodeURI(storeName);\n\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send(params);\n  };\n\n  const testVendor = () => {\n    xhr = new XMLHttpRequest();\n    xhr.open(\n      \"GET\",\n      \"https://api.zontreck.dev/zni/SessionsData.php?action=get&var=user\",\n      false\n    );\n    xhr.addEventListener(\"load\", processHTTP);\n    xhr.send();\n  };\n\n  return (\n    <div>\n      <center>\n        <Breadcrumb>\n          <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n          <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\n          <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\n          <Breadcrumb.Item href=\"/account/products/stores\">\n            Stores\n          </Breadcrumb.Item>\n          <Breadcrumb.Item href={\"/account/products/stores/\" + storeName}>\n            {storeName}\n          </Breadcrumb.Item>\n          <Breadcrumb.Item active>Vendors Manager</Breadcrumb.Item>\n        </Breadcrumb>\n        <br />\n        <Card\n          className=\"bg-dark text-white\"\n          style={{ width: \"80vw\", textAlign: \"left\" }}\n        >\n          <Card.Header>\n            {storeName} - Vendors Manager\n            <div>\n              <Button\n                variant=\"danger\"\n                onClick={() => refreshVendorList()}\n                style={{ position: \"absolute\", right: 0, top: 0 }}\n              >\n                ↺\n              </Button>\n            </div>\n          </Card.Header>\n          <Card.Body>\n            {vendors.map(renderVendorsList)}\n            <br />\n            <Card className=\"bg-dark text-white\">\n              <Card.Header>Unassociated Vendors</Card.Header>\n              <Card.Body>\n                The list of vendors not yet assigned to a store\n              </Card.Body>\n            </Card>\n          </Card.Body>\n          <Card.Footer>Store Owner: {storeOwner}</Card.Footer>\n        </Card>\n      </center>\n      <Modal show={editor} onHide={toggleEditor} size=\"lg\">\n        <Modal.Header closeButton>Vendor Editor</Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Row>\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Vendor Online\"\n                checked={vendorOnline}\n                onClick={() => setVendorOnline(!vendorOnline)}\n              />\n            </Form.Row>\n            <Form.Row>\n              <Form.Label sm=\"2\">Vendor Product: </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  as=\"select\"\n                  defaultValue=\"Choose..\"\n                  onChange={handleNewVendorProduct}\n                  value={vendorProductName}\n                >\n                  <option>Choose..</option>\n                  {vendorProductNames.map(renderProductChoices)}\n                </Form.Control>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={toggleEditor}>\n            Cancel\n          </Button>{\" \"}\n          <Button variant=\"success\" onClick={doSaveVendorData}>\n            Update Vendor\n          </Button>{\" \"}\n          <Button variant=\"primary\" onClick={testVendor}>\n            Test Delivery\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default VendorView;\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHDeckEditorView.js",["284","285","286","287","288","289","290","291","292","293"],"import React, { useState } from \"react\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Breadcrumb,\r\n  Modal,\r\n  Col,\r\n  Table,\r\n  Image,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst CAHDeckEditorView = (props) => {\r\n  const [downloadDone, setDownloadDone] = useState(false);\r\n  const [cardList, setCardList] = useState([]);\r\n\r\n  var xhr = null;\r\n  const doDownload = () => {\r\n    if (downloadDone) return;\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.zontreck.dev/zni/Modify_Card.php\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var datas = xhr.responseText.split(\";;\");\r\n        if (datas[0] == \"List_Cards\") {\r\n          setCardList(JSON.parse(datas[1]));\r\n          setDownloadDone(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    var params = \"TYPE_OVERRIDE=LIST_CARDS&DECK=\" + props.match.params.deckName;\r\n    xhr.send(params);\r\n  };\r\n\r\n  doDownload();\r\n\r\n  const renderCardList = (entry, index) => {\r\n    var colorStr = \"white\";\r\n    if (entry.Color == 0) colorStr = \"White\";\r\n    else colorStr = \"Black\";\r\n\r\n    if (entry.Color == 0) entry.Num = 0;\r\n    return (\r\n      <tr>\r\n        <td>{entry.Text}</td>\r\n        <td>{colorStr}</td>\r\n        <td>{entry.Num}</td>\r\n        <td>\r\n          <Button\r\n            variant=\"danger\"\r\n            href={\r\n              \"/account/products/cah_manager/\" +\r\n              props.match.params.deckName +\r\n              \"/edit/\" +\r\n              entry.ID\r\n            }\r\n          >\r\n            Edit Card\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const refresh = () => {\r\n    if (downloadDone) setDownloadDone(false);\r\n    doDownload();\r\n  };\r\n\r\n  const newID = () => {\r\n    return uuidv4();\r\n  };\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account/products/cah_manager\">\r\n          Cards Against Humanity\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>{props.match.params.deckName}</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <center>\r\n        <div style={{ width: \"75vw\", height: \"50vh\" }}>\r\n          <Card className=\"bg-dark text-white\">\r\n            <Card.Title>\r\n              {props.match.params.deckName} - Editor -{\" \"}\r\n              {!downloadDone && refresh()}\r\n              {downloadDone && cardList.length} Total Cards\r\n              <Button\r\n                variant=\"primary\"\r\n                style={{ position: \"absolute\", right: 5, top: 5 }}\r\n                href={\r\n                  \"/account/products/cah_manager/\" +\r\n                  props.match.params.deckName +\r\n                  \"/edit/\" +\r\n                  newID()\r\n                }\r\n              >\r\n                New Card\r\n              </Button>\r\n            </Card.Title>\r\n            <Card.Body>\r\n              * Note: This will only list the cards presently in the deck. The\r\n              card editor is on another page, use the card's link to go there\r\n              <br />\r\n              <Table hover variant=\"dark\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Card Text</th>\r\n                    <th>Card Color</th>\r\n                    <th>Number of Cards</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {!downloadDone && refresh()}\r\n                  {downloadDone && cardList.map(renderCardList)}\r\n                </tbody>\r\n              </Table>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CAHDeckEditorView;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHDeckScriptView.js",["294","295","296","297","298","299","300","301","302","303","304","305","306","307"],"import React, { useState } from \"react\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Breadcrumb,\r\n  Modal,\r\n  Col,\r\n  Table,\r\n  Image,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Highlight from \"react-highlight\";\r\n\r\nconst CAHDeckScriptView = (props) => {\r\n  const newID = () => {\r\n    return uuidv4();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account/products/cah_manager\">\r\n          Cards Against Humanity\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item\r\n          href={\"/account/products/cah_manager/\" + props.match.params.deckName}\r\n        >\r\n          {props.match.params.deckName}\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Deck Ingredient Script</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div\r\n        style={{\r\n          width: \"75vw\",\r\n          height: \"50vh\",\r\n          position: \"absolute\",\r\n          left: \"15vw\",\r\n        }}\r\n      >\r\n        <Card className=\"bg-dark text-white\">\r\n          <Card.Title>\r\n            <center>{props.match.params.deckName} - Script Ingredient</center>\r\n          </Card.Title>\r\n          <Card.Body>\r\n            {props.match.params.deckName == \"OFFICIAL\" && (\r\n              <center>\r\n                <h1>\r\n                  <a style={{ color: \"red\" }}>\r\n                    This is the default deck and cannot be uninstalled or\r\n                    installed into a game table\r\n                  </a>\r\n                </h1>\r\n              </center>\r\n            )}\r\n            {props.match.params.deckName != \"OFFICIAL\" && (\r\n              <Highlight language=\"lsl\" style={{ textAlign: \"left\" }}>\r\n                {'integer ingredient_channel = -8392888;\\ndefault\\n{\\n    state_entry()\\n    {\\n        llListen(ingredient_channel, \"\", \"\", \"\");\\n        llSetText(\"Deck of Cards\\\\n-----\\\\nQuantity: 1\", <0,1,0>,1);\\n        llSetObjectDesc(\"' +\r\n                  props.match.params.deckName +\r\n                  '\");\\n    }\\n    touch_start(integer t){\\n        llSay(0, \"' +\r\n                  props.match.params.deckName +\r\n                  ' Deck of Cards; Quantity: 1\");\\n    }\\n    on_rez(integer t){\\n        llResetScript();\\n    }\\n    listen(integer c,string n,key i,string m){\\n        if(m == \"scan\"){\\n            llSay(c+1, \"Deck\");\\n        }else if(m == (string)llGetKey()){\\n            llDie();\\n        }\\n    }\\n}\\n'}\r\n              </Highlight>\r\n            )}\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CAHDeckScriptView;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHGameEditView.js",["308","309","310","311","312","313","314","315","316","317","318"],"import React, { useState } from \"react\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Breadcrumb,\r\n  Modal,\r\n  Col,\r\n  Table,\r\n  Image,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { v4 as uuidv4, v4 } from \"uuid\";\r\n\r\nconst CAHGameEditView = (props) => {\r\n  const mem = new Memory();\r\n  const [tableList, setTableList] = useState([]);\r\n  var xhr = null;\r\n  const [downloadDone, setDownloadDone] = useState(false);\r\n\r\n  const doDownload = () => {\r\n    if (downloadDone) return;\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/Modify_Card.php?TYPE_OVERRIDE=LIST_TABLES\"\r\n    );\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var dats = xhr.responseText.split(\";;\");\r\n        if (dats[0] == \"List_Tables\") {\r\n          // We're good!!\r\n          setTableList(JSON.parse(dats[1]));\r\n          setDownloadDone(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    xhr.send();\r\n\r\n    setDownloadDone(true);\r\n  };\r\n\r\n  doDownload();\r\n\r\n  const gen_id = () => {\r\n    return new v4();\r\n  };\r\n\r\n  const refresh = () => {\r\n    setDownloadDone(false);\r\n    doDownload();\r\n  };\r\n\r\n  const deleteGame = (ID) => {\r\n    // triggers a delete of the game ID\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.zontreck.dev/zni/Modify_Card.php\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.responseText == \"Delete_Game;;ok\") {\r\n          refresh();\r\n        }\r\n      }\r\n    });\r\n    xhr.send(\"TYPE_OVERRIDE=DELETE_GAME&TABLE_ID=\" + ID);\r\n  };\r\n\r\n  const renderTableList = (entry, index) => {\r\n    return (\r\n      <tr>\r\n        <td>{entry.Owner}</td>\r\n        <td>{entry.ID}</td>\r\n        <td>\r\n          <Button\r\n            href={\"/account/products/cah_manager/_a/games/edit/\" + entry.ID}\r\n            variant=\"success\"\r\n          >\r\n            Edit Game\r\n          </Button>{\" \"}\r\n          <Button\r\n            onClick={() => {\r\n              deleteGame(entry.ID);\r\n            }}\r\n            variant=\"danger\"\r\n          >\r\n            DELETE GAME\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account/products/cah_manager\">\r\n          Cards Against Humanity\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Active Game Editor</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div\r\n        style={{\r\n          width: \"50vw\",\r\n          height: \"75vh\",\r\n          position: \"absolute\",\r\n          top: \"15vh\",\r\n          left: \"25vw\",\r\n        }}\r\n      >\r\n        <Card size=\"lg\" className=\"bg-dark text-light\">\r\n          <center>\r\n            <Card.Title>\r\n              Active Games Editor - {downloadDone && tableList.length}\r\n            </Card.Title>\r\n            <Card.Body>\r\n              <Table hover variant=\"dark\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Table Owner</th>\r\n                    <th>Table ID</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {!downloadDone && refresh()}\r\n                  {downloadDone && tableList.map(renderTableList)}\r\n                </tbody>\r\n              </Table>\r\n            </Card.Body>\r\n          </center>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CAHGameEditView;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHCardEditorView.js",["319","320","321","322","323","324","325","326","327"],"import React, { useState } from \"react\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Breadcrumb,\r\n  Modal,\r\n  Col,\r\n  Table,\r\n  Image,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst CAHCardEditorView = (props) => {\r\n  const [downloadDone, setDownloadDone] = useState(false);\r\n  const [cardColor, setCardColor] = useState(0);\r\n  const [cardText, setCardText] = useState(\"\");\r\n  const [cardNum, setCardNum] = useState(0);\r\n  //const [card, setCardTime] = useState(0);\r\n\r\n  var xhr = null;\r\n  const doDownload = () => {\r\n    if (downloadDone) return;\r\n\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.zontreck.dev/zni/Modify_Card.php\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        var datas = xhr.responseText.split(\";;\");\r\n        if (datas[0] == \"Fetch_Card\") {\r\n          var data = JSON.parse(datas[1]);\r\n          setCardColor(Number(data.Color));\r\n          setCardText(data.Text);\r\n          setCardNum(Number(data.Num));\r\n          //setCardTime(data.Time);\r\n          setDownloadDone(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    var params =\r\n      \"TYPE_OVERRIDE=FETCH&DECK=\" +\r\n      props.match.params.deckName +\r\n      \"&CARD_ID=\" +\r\n      props.match.params.cardID;\r\n    xhr.send(params);\r\n  };\r\n\r\n  doDownload();\r\n\r\n  const refresh = () => {\r\n    if (downloadDone) setDownloadDone(false);\r\n    doDownload();\r\n  };\r\n\r\n  const newID = () => {\r\n    return uuidv4();\r\n  };\r\n\r\n  const uploadCard = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.zontreck.dev/zni/Modify_Card.php\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    var params =\r\n      \"DECK=\" +\r\n      props.match.params.deckName +\r\n      \"&CARD_ID=\" +\r\n      props.match.params.cardID +\r\n      \"&CARD_TEXT=\" +\r\n      btoa(cardText) +\r\n      \"&COLOR=\" +\r\n      cardColor +\r\n      \"&DRAW_COUNT=\" +\r\n      cardNum;\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.responseText === \"Modify_Card;;ok;update\") {\r\n          window.location =\r\n            \"/account/products/cah_manager/\" + props.match.params.deckName;\r\n        }\r\n      }\r\n    });\r\n\r\n    xhr.send(params);\r\n  };\r\n\r\n  const deleteCard = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", \"https://api.zontreck.dev/zni/Modify_Card.php\");\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    var params =\r\n      \"DECK=\" +\r\n      props.match.params.deckName +\r\n      \"&CARD_ID=\" +\r\n      props.match.params.cardID +\r\n      \"&TYPE_OVERRIDE=DELETE\";\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.responseText === \"Modify_Card;;ok;delete\") {\r\n          window.location =\r\n            \"/account/products/cah_manager/\" + props.match.params.deckName;\r\n        }\r\n      }\r\n    });\r\n    xhr.send(params);\r\n  };\r\n\r\n  const renderOpts = (entry, index) => {\r\n    return (\r\n      <Button variant=\"primary\" onClick={() => setCardNum(entry)}>\r\n        {entry}\r\n      </Button>\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account\">Account</Breadcrumb.Item>\r\n        <Breadcrumb.Item disabled>Products</Breadcrumb.Item>\r\n        <Breadcrumb.Item href=\"/account/products/cah_manager\">\r\n          Cards Against Humanity\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item\r\n          href={\"/account/products/cah_manager/\" + props.match.params.deckName}\r\n        >\r\n          {props.match.params.deckName}\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>\r\n          Card Edit - {props.match.params.cardID}\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <center>\r\n        <div style={{ width: \"75vw\", height: \"50vh\" }}>\r\n          <Card className=\"bg-dark text-white\">\r\n            <Card.Title>CARD EDITOR</Card.Title>\r\n            <Card.Body>\r\n              <div style={{ width: \"25vw\", height: \"50vh\" }}>\r\n                <Card\r\n                  bg={cardColor === 0 ? \"light\" : \"secondary\"}\r\n                  text={cardColor === 0 ? \"black\" : \"white\"}\r\n                  className=\"mb-2\"\r\n                >\r\n                  <Card.Title>\r\n                    <pre style={{ whiteSpace: \"pre-wrap\" }}>\r\n                      <font\r\n                        color={cardColor === 0 ? \"black\" : \"white\"}\r\n                        size=\"6\"\r\n                      >\r\n                        {downloadDone && cardText.substr(0, 128)}\r\n                      </font>\r\n                    </pre>\r\n                  </Card.Title>\r\n                  <Card.Body>\r\n                    <pre>\r\n                      <font color={cardColor === 0 ? \"black\" : \"white\"}>\r\n                        {downloadDone &&\r\n                          (cardColor === 0\r\n                            ? \"Cards Against Humanity\"\r\n                            : \"Draw (\" + cardNum + \")\\nPick (\" + cardNum + \")\")}\r\n                      </font>\r\n                    </pre>\r\n                  </Card.Body>\r\n                  <Card.Footer>\r\n                    <font color={cardColor === 0 ? \"black\" : \"white\"}>\r\n                      <Form.Row>\r\n                        <Form.Label sm=\"2\">Card Color: </Form.Label>\r\n                        <Col sm=\"6\">\r\n                          <Button\r\n                            variant=\"light\"\r\n                            onClick={() => setCardColor(0)}\r\n                          >\r\n                            WHITE\r\n                          </Button>{\" \"}\r\n                          <Button\r\n                            variant=\"dark\"\r\n                            onClick={() => setCardColor(1)}\r\n                          >\r\n                            BLACK\r\n                          </Button>\r\n                        </Col>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Label sm=\"2\">Card Draw Count: </Form.Label>\r\n                        <Col sm=\"6\">\r\n                          {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(renderOpts)}\r\n                        </Col>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Label sm=\"2\">Card Text: </Form.Label>\r\n                        <Col sm=\"6\">\r\n                          <Form.Control\r\n                            as=\"textarea\"\r\n                            value={cardText}\r\n                            onChange={(e) => setCardText(e.target.value)}\r\n                            rows={3}\r\n                          ></Form.Control>\r\n                        </Col>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Button variant=\"primary\" onClick={uploadCard}>\r\n                          Confirm Changes\r\n                        </Button>{\" \"}\r\n                        <Button variant=\"danger\" onClick={deleteCard}>\r\n                          Delete this card\r\n                        </Button>\r\n                      </Form.Row>\r\n                    </font>\r\n                  </Card.Footer>\r\n                </Card>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      </center>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CAHCardEditorView;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\SingleTimers.js",[],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\AlertStore.js",[],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\ProductsTab.js",["328","329","330"],"import React, { useState } from \"react\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { Form, Button, Table } from \"react-bootstrap\";\r\nimport { Memory } from \"./MemorySingleton.js\";\r\n\r\nconst ProductsTab = (props) => {\r\n  const mem = new Memory();\r\n  return (\r\n    <div>\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>Product Name</th>\r\n            <th>Description</th>\r\n            <th>Link</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Store System</td>\r\n            <td>Store Servers and Vendors</td>\r\n            <td>\r\n              <Button href=\"/account/products/stores\" variant=\"primary\">\r\n                View\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>OpenSimulator</td>\r\n            <td>Account Management for OpenSim</td>\r\n            <td>\r\n              <Button href=\"/account/products/opensim\" variant=\"primary\">\r\n                View\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Particle Editor</td>\r\n            <td>\r\n              Interactive particle editor, inspired by Schmobag Hogfather's\r\n              Schmarticles\r\n            </td>\r\n            <td>\r\n              <Button href=\"/account/products/particle\" variant=\"primary\">\r\n                View\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n          {mem.Level >= 3 && (\r\n            <tr>\r\n              <td>Cards Against Humanity</td>\r\n              <td>Card Creation Tool for Admins</td>\r\n              <td>\r\n                <Button href=\"/account/products/cah_manager\" variant=\"primary\">\r\n                  View\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductsTab;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Search.js",["331","332","333","334","335","336"],"import React, { useState, useEffect } from \"react\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { Form, Col, Table, Button } from \"react-bootstrap\";\r\nimport SingleTimers from \"./SingleTimers.js\";\r\n\r\nconst Search = (props) => {\r\n  const { addToast } = useToasts();\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [table, setTable] = useState([]);\r\n  const processHTTP = () => {\r\n    if (xhr.readyState === 4) {\r\n      var data = xhr.responseText.split(\";;\");\r\n      if (data[0] == \"AdminsSearch\") {\r\n        var arr = [];\r\n        var data2 = data[1].split(\"~\");\r\n        for (var i = 0; i < data2.length; i++) {\r\n          var data3 = data2[i].split(\";\");\r\n          arr.push({ username: data3[0], level: Number(data3[1]) });\r\n        }\r\n\r\n        setTable(arr);\r\n      }\r\n    }\r\n  };\r\n\r\n  var xhr = null;\r\n  const updateSearchText = () => {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"POST\",\r\n      \"https://api.zontreck.dev/zni/AdminsSearch.php\",\r\n      false\r\n    );\r\n    var params = \"q=\" + encodeURI(searchText);\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", processHTTP);\r\n    xhr.send(params);\r\n  };\r\n  const impersonate = (userx, levelx) => {\r\n    console.log(\"Beginning user impersonation\");\r\n    console.log(\"impersonate user: \" + userx + \"; \" + levelx);\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://api.zontreck.dev/zni/AdminActions.php?type=impersonate&user=\" +\r\n        userx +\r\n        \"&level=\" +\r\n        levelx,\r\n      false\r\n    );\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    xhr.addEventListener(\"load\", () => {\r\n      if (xhr.readyState === 4) {\r\n        console.log(\"response: \" + xhr.responseText);\r\n        var d = xhr.responseText.split(\";;\");\r\n        if (d[0] == \"AdminActions\") {\r\n          if (d[1] == \"1\") {\r\n            addToast(\"Unauthorized\", {\r\n              appearance: \"error\",\r\n              autoDismiss: true,\r\n              autoDismissTimeout: 2500,\r\n            });\r\n          } else if (d[1] == \"0\") {\r\n            addToast(\"Impersonation success\", { appearance: \"success\" });\r\n            setTimeout(() => {\r\n              window.location = \"/account\";\r\n            }, 5000);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    xhr.send();\r\n  };\r\n  const renderUserSearch = (entry, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{entry.username}</td>\r\n        <td>{entry.level}</td>\r\n        <td>\r\n          <Button\r\n            onClick={() => impersonate(entry.username, entry.level)}\r\n            variant=\"danger\"\r\n          >\r\n            Impersonate\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  //SingleTimers.instance().add(updateSearchText, 10000, \"update_search_text\");\r\n  //setInterval(updateSearchText, 10000);\r\n  const handleNewSearch = (event) => {\r\n    setTable([]);\r\n    setSearchText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <Form.Row>\r\n          <Form.Label sm=\"2\">Search Query: </Form.Label>\r\n          <Col sm=\"6\">\r\n            {\" \"}\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={searchText}\r\n              onChange={handleNewSearch}\r\n            ></Form.Control>\r\n          </Col>\r\n          <Col sm=\"2\">\r\n            <Button\r\n              onClick={() => {\r\n                addToast(\"Searching...\", {\r\n                  appearance: \"success\",\r\n                  autoDismiss: true,\r\n                  autoDismissTimeout: 1500,\r\n                });\r\n                setTimeout(updateSearchText, 5000);\r\n              }}\r\n              variant=\"primary\"\r\n            >\r\n              Search\r\n            </Button>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n      <br />\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>Username</th>\r\n            <th>Account Level</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{table.map(renderUserSearch)}</tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MenuHandlers\\AccountGuestOptions.js",["337"],"import React from \"react\";\r\nimport { Nav, NavDropdown } from \"react-bootstrap\";\r\n\r\nconst GuestOptions = (props) => {\r\n  return (\r\n    <>\r\n      <NavDropdown.Item href=\"/register\">Register</NavDropdown.Item>\r\n\r\n      <NavDropdown.Item href=\"/login\">Login</NavDropdown.Item>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GuestOptions;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\MenuHandlers\\AccountUserOptions.js",["338"],"import React from \"react\";\r\nimport { NavDropdown, Nav } from \"react-bootstrap\";\r\n\r\nconst UserOptions = (props) => {\r\n  return (\r\n    <>\r\n      <NavDropdown.Item href=\"/account\">\r\n        View Account: {props.UserName}\r\n      </NavDropdown.Item>\r\n      <NavDropdown.Item href=\"/logout\">Logout</NavDropdown.Item>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserOptions;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\CAHGameEditorView.js",["339","340","341","342","343","344","345","346","347","348","349","350","351","352"],"import React, { useState } from \"react\";\r\nimport { Memory } from \"../MemorySingleton.js\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Card,\r\n  Breadcrumb,\r\n  Modal,\r\n  Col,\r\n  Table,\r\n  Image,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { v4 as uuidv4, v4 } from \"uuid\";\r\n\r\nconst CAHGameEditorView = (props) => {\r\n  return <div></div>;\r\n};\r\n\r\nexport default CAHGameEditorView;\r\n","C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\ParticleEditorView1.js",["353","354","355","356","357","358","359"],"C:\\Users\\Tara\\Documents\\zdev\\zontreck.dev\\src\\Products\\ParticleEditor.js",["360","361","362","363","364","365","366","367","368","369","370","371","372","373","374"],{"ruleId":"375","replacedBy":"376"},{"ruleId":"377","replacedBy":"378"},{"ruleId":"379","severity":1,"message":"380","line":6,"column":10,"nodeType":"381","messageId":"382","endLine":6,"endColumn":18},{"ruleId":"379","severity":1,"message":"383","line":6,"column":25,"nodeType":"381","messageId":"382","endLine":6,"endColumn":33},{"ruleId":"379","severity":1,"message":"384","line":31,"column":9,"nodeType":"381","messageId":"382","endLine":31,"endColumn":15},{"ruleId":"385","severity":1,"message":"386","line":42,"column":19,"nodeType":"387","messageId":"388","endLine":42,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":46,"column":21,"nodeType":"387","messageId":"388","endLine":46,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":63,"column":28,"nodeType":"387","messageId":"388","endLine":63,"endColumn":30},{"ruleId":"379","severity":1,"message":"389","line":2,"column":24,"nodeType":"381","messageId":"382","endLine":2,"endColumn":32},{"ruleId":"379","severity":1,"message":"390","line":2,"column":34,"nodeType":"381","messageId":"382","endLine":2,"endColumn":37},{"ruleId":"385","severity":1,"message":"386","line":35,"column":21,"nodeType":"387","messageId":"388","endLine":35,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":36,"column":23,"nodeType":"387","messageId":"388","endLine":36,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":42,"column":30,"nodeType":"387","messageId":"388","endLine":42,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":50,"column":25,"nodeType":"387","messageId":"388","endLine":50,"endColumn":27},{"ruleId":"379","severity":1,"message":"391","line":2,"column":8,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"390","line":3,"column":24,"nodeType":"381","messageId":"382","endLine":3,"endColumn":27},{"ruleId":"385","severity":1,"message":"386","line":58,"column":21,"nodeType":"387","messageId":"388","endLine":58,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":60,"column":23,"nodeType":"387","messageId":"388","endLine":60,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":74,"column":30,"nodeType":"387","messageId":"388","endLine":74,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":82,"column":30,"nodeType":"387","messageId":"388","endLine":82,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":90,"column":30,"nodeType":"387","messageId":"388","endLine":90,"endColumn":32},{"ruleId":"379","severity":1,"message":"392","line":1,"column":17,"nodeType":"381","messageId":"382","endLine":1,"endColumn":25},{"ruleId":"379","severity":1,"message":"380","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":18},{"ruleId":"379","severity":1,"message":"393","line":2,"column":20,"nodeType":"381","messageId":"382","endLine":2,"endColumn":26},{"ruleId":"379","severity":1,"message":"394","line":2,"column":28,"nodeType":"381","messageId":"382","endLine":2,"endColumn":31},{"ruleId":"379","severity":1,"message":"383","line":2,"column":33,"nodeType":"381","messageId":"382","endLine":2,"endColumn":41},{"ruleId":"379","severity":1,"message":"395","line":5,"column":3,"nodeType":"381","messageId":"382","endLine":5,"endColumn":7},{"ruleId":"379","severity":1,"message":"396","line":6,"column":3,"nodeType":"381","messageId":"382","endLine":6,"endColumn":6},{"ruleId":"379","severity":1,"message":"397","line":7,"column":3,"nodeType":"381","messageId":"382","endLine":7,"endColumn":8},{"ruleId":"385","severity":1,"message":"386","line":37,"column":21,"nodeType":"387","messageId":"388","endLine":37,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":38,"column":23,"nodeType":"387","messageId":"388","endLine":38,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":45,"column":30,"nodeType":"387","messageId":"388","endLine":45,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":52,"column":30,"nodeType":"387","messageId":"388","endLine":52,"endColumn":32},{"ruleId":"379","severity":1,"message":"398","line":1,"column":8,"nodeType":"381","messageId":"382","endLine":1,"endColumn":13},{"ruleId":"379","severity":1,"message":"392","line":1,"column":17,"nodeType":"381","messageId":"382","endLine":1,"endColumn":25},{"ruleId":"379","severity":1,"message":"399","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":20},{"ruleId":"379","severity":1,"message":"400","line":2,"column":22,"nodeType":"381","messageId":"382","endLine":2,"endColumn":26},{"ruleId":"379","severity":1,"message":"395","line":2,"column":28,"nodeType":"381","messageId":"382","endLine":2,"endColumn":32},{"ruleId":"379","severity":1,"message":"396","line":2,"column":34,"nodeType":"381","messageId":"382","endLine":2,"endColumn":37},{"ruleId":"379","severity":1,"message":"397","line":2,"column":39,"nodeType":"381","messageId":"382","endLine":2,"endColumn":44},{"ruleId":"379","severity":1,"message":"401","line":2,"column":46,"nodeType":"381","messageId":"382","endLine":2,"endColumn":52},{"ruleId":"379","severity":1,"message":"402","line":12,"column":9,"nodeType":"381","messageId":"382","endLine":12,"endColumn":15},{"ruleId":"385","severity":1,"message":"386","line":26,"column":21,"nodeType":"387","messageId":"388","endLine":26,"endColumn":23},{"ruleId":"379","severity":1,"message":"403","line":30,"column":7,"nodeType":"381","messageId":"382","endLine":30,"endColumn":14},{"ruleId":"385","severity":1,"message":"386","line":35,"column":19,"nodeType":"387","messageId":"388","endLine":35,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":36,"column":21,"nodeType":"387","messageId":"388","endLine":36,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":37,"column":23,"nodeType":"387","messageId":"388","endLine":37,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":50,"column":26,"nodeType":"387","messageId":"388","endLine":50,"endColumn":28},{"ruleId":"385","severity":1,"message":"386","line":51,"column":21,"nodeType":"387","messageId":"388","endLine":51,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":61,"column":28,"nodeType":"387","messageId":"388","endLine":61,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":76,"column":15,"nodeType":"387","messageId":"388","endLine":76,"endColumn":17},{"ruleId":"385","severity":1,"message":"386","line":77,"column":20,"nodeType":"387","messageId":"388","endLine":77,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":78,"column":20,"nodeType":"387","messageId":"388","endLine":78,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":79,"column":20,"nodeType":"387","messageId":"388","endLine":79,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":80,"column":20,"nodeType":"387","messageId":"388","endLine":80,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":81,"column":20,"nodeType":"387","messageId":"388","endLine":81,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":82,"column":20,"nodeType":"387","messageId":"388","endLine":82,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":143,"column":21,"nodeType":"387","messageId":"388","endLine":143,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":180,"column":21,"nodeType":"387","messageId":"388","endLine":180,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":181,"column":23,"nodeType":"387","messageId":"388","endLine":181,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":188,"column":30,"nodeType":"387","messageId":"388","endLine":188,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":212,"column":16,"nodeType":"387","messageId":"388","endLine":212,"endColumn":18},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"379","severity":1,"message":"407","line":15,"column":16,"nodeType":"381","messageId":"382","endLine":15,"endColumn":22},{"ruleId":"379","severity":1,"message":"408","line":18,"column":9,"nodeType":"381","messageId":"382","endLine":18,"endColumn":12},{"ruleId":"385","severity":1,"message":"386","line":38,"column":21,"nodeType":"387","messageId":"388","endLine":38,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":32,"column":19,"nodeType":"387","messageId":"388","endLine":32,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":33,"column":21,"nodeType":"387","messageId":"388","endLine":33,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":34,"column":23,"nodeType":"387","messageId":"388","endLine":34,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":42,"column":26,"nodeType":"387","messageId":"388","endLine":42,"endColumn":28},{"ruleId":"385","severity":1,"message":"386","line":43,"column":21,"nodeType":"387","messageId":"388","endLine":43,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":51,"column":28,"nodeType":"387","messageId":"388","endLine":51,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":59,"column":28,"nodeType":"387","messageId":"388","endLine":59,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":74,"column":26,"nodeType":"387","messageId":"388","endLine":74,"endColumn":28},{"ruleId":"385","severity":1,"message":"386","line":75,"column":21,"nodeType":"387","messageId":"388","endLine":75,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":80,"column":28,"nodeType":"387","messageId":"388","endLine":80,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":88,"column":26,"nodeType":"387","messageId":"388","endLine":88,"endColumn":28},{"ruleId":"385","severity":1,"message":"386","line":89,"column":21,"nodeType":"387","messageId":"388","endLine":89,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":94,"column":28,"nodeType":"387","messageId":"388","endLine":94,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":151,"column":16,"nodeType":"387","messageId":"388","endLine":151,"endColumn":18},{"ruleId":"385","severity":1,"message":"386","line":239,"column":23,"nodeType":"387","messageId":"388","endLine":239,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":252,"column":23,"nodeType":"387","messageId":"388","endLine":252,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":264,"column":23,"nodeType":"387","messageId":"388","endLine":264,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":308,"column":21,"nodeType":"387","messageId":"388","endLine":308,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":313,"column":21,"nodeType":"387","messageId":"388","endLine":313,"endColumn":23},{"ruleId":"379","severity":1,"message":"409","line":23,"column":10,"nodeType":"381","messageId":"382","endLine":23,"endColumn":28},{"ruleId":"379","severity":1,"message":"410","line":23,"column":30,"nodeType":"381","messageId":"382","endLine":23,"endColumn":51},{"ruleId":"385","severity":1,"message":"386","line":43,"column":21,"nodeType":"387","messageId":"388","endLine":43,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":44,"column":23,"nodeType":"387","messageId":"388","endLine":44,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":54,"column":30,"nodeType":"387","messageId":"388","endLine":54,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":60,"column":30,"nodeType":"387","messageId":"388","endLine":60,"endColumn":32},{"ruleId":"385","severity":1,"message":"386","line":88,"column":23,"nodeType":"387","messageId":"388","endLine":88,"endColumn":25},{"ruleId":"411","severity":1,"message":"412","line":89,"column":20,"nodeType":"381","messageId":"413","endLine":89,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":93,"column":28,"nodeType":"387","messageId":"388","endLine":93,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":166,"column":21,"nodeType":"387","messageId":"388","endLine":166,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":167,"column":23,"nodeType":"387","messageId":"388","endLine":167,"endColumn":25},{"ruleId":"385","severity":1,"message":"386","line":168,"column":25,"nodeType":"387","messageId":"388","endLine":168,"endColumn":27},{"ruleId":"385","severity":1,"message":"386","line":63,"column":20,"nodeType":"387","messageId":"388","endLine":63,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":64,"column":22,"nodeType":"387","messageId":"388","endLine":64,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":70,"column":29,"nodeType":"387","messageId":"388","endLine":70,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":40,"column":20,"nodeType":"387","messageId":"388","endLine":40,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":41,"column":22,"nodeType":"387","messageId":"388","endLine":41,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":51,"column":27,"nodeType":"387","messageId":"388","endLine":51,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":52,"column":22,"nodeType":"387","messageId":"388","endLine":52,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":58,"column":29,"nodeType":"387","messageId":"388","endLine":58,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":64,"column":29,"nodeType":"387","messageId":"388","endLine":64,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":67,"column":27,"nodeType":"387","messageId":"388","endLine":67,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":69,"column":27,"nodeType":"387","messageId":"388","endLine":69,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":72,"column":22,"nodeType":"387","messageId":"388","endLine":72,"endColumn":24},{"ruleId":"411","severity":1,"message":"414","line":78,"column":15,"nodeType":"381","messageId":"413","endLine":78,"endColumn":17},{"ruleId":"385","severity":1,"message":"386","line":90,"column":27,"nodeType":"387","messageId":"388","endLine":90,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":91,"column":22,"nodeType":"387","messageId":"388","endLine":91,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":92,"column":27,"nodeType":"387","messageId":"388","endLine":92,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":98,"column":29,"nodeType":"387","messageId":"388","endLine":98,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":112,"column":27,"nodeType":"387","messageId":"388","endLine":112,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":113,"column":22,"nodeType":"387","messageId":"388","endLine":113,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":114,"column":27,"nodeType":"387","messageId":"388","endLine":114,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":120,"column":29,"nodeType":"387","messageId":"388","endLine":120,"endColumn":31},{"ruleId":"411","severity":1,"message":"414","line":133,"column":15,"nodeType":"381","messageId":"413","endLine":133,"endColumn":17},{"ruleId":"385","severity":1,"message":"386","line":256,"column":14,"nodeType":"387","messageId":"388","endLine":256,"endColumn":16},{"ruleId":"385","severity":1,"message":"386","line":257,"column":19,"nodeType":"387","messageId":"388","endLine":257,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":488,"column":35,"nodeType":"387","messageId":"388","endLine":488,"endColumn":37},{"ruleId":"385","severity":1,"message":"386","line":34,"column":20,"nodeType":"387","messageId":"388","endLine":34,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":35,"column":22,"nodeType":"387","messageId":"388","endLine":35,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":45,"column":27,"nodeType":"387","messageId":"388","endLine":45,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":64,"column":27,"nodeType":"387","messageId":"388","endLine":64,"endColumn":29},{"ruleId":"411","severity":1,"message":"412","line":70,"column":18,"nodeType":"381","messageId":"413","endLine":70,"endColumn":19},{"ruleId":"385","severity":1,"message":"386","line":92,"column":27,"nodeType":"387","messageId":"388","endLine":92,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":93,"column":22,"nodeType":"387","messageId":"388","endLine":93,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":122,"column":29,"nodeType":"387","messageId":"388","endLine":122,"endColumn":31},{"ruleId":"385","severity":1,"message":"386","line":129,"column":27,"nodeType":"387","messageId":"388","endLine":129,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":131,"column":27,"nodeType":"387","messageId":"388","endLine":131,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":132,"column":22,"nodeType":"387","messageId":"388","endLine":132,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":133,"column":24,"nodeType":"387","messageId":"388","endLine":133,"endColumn":26},{"ruleId":"379","severity":1,"message":"415","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"416","line":5,"column":3,"nodeType":"381","messageId":"382","endLine":5,"endColumn":7},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"390","line":9,"column":3,"nodeType":"381","messageId":"382","endLine":9,"endColumn":6},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"385","severity":1,"message":"386","line":31,"column":22,"nodeType":"387","messageId":"388","endLine":31,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":46,"column":21,"nodeType":"387","messageId":"388","endLine":46,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":49,"column":21,"nodeType":"387","messageId":"388","endLine":49,"endColumn":23},{"ruleId":"379","severity":1,"message":"392","line":1,"column":17,"nodeType":"381","messageId":"382","endLine":1,"endColumn":25},{"ruleId":"379","severity":1,"message":"415","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"401","line":4,"column":3,"nodeType":"381","messageId":"382","endLine":4,"endColumn":9},{"ruleId":"379","severity":1,"message":"416","line":5,"column":3,"nodeType":"381","messageId":"382","endLine":5,"endColumn":7},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"390","line":9,"column":3,"nodeType":"381","messageId":"382","endLine":9,"endColumn":6},{"ruleId":"379","severity":1,"message":"417","line":10,"column":3,"nodeType":"381","messageId":"382","endLine":10,"endColumn":8},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"379","severity":1,"message":"418","line":19,"column":9,"nodeType":"381","messageId":"382","endLine":19,"endColumn":14},{"ruleId":"385","severity":1,"message":"386","line":52,"column":42,"nodeType":"387","messageId":"388","endLine":52,"endColumn":44},{"ruleId":"419","severity":1,"message":"420","line":55,"column":19,"nodeType":"421","endLine":55,"endColumn":47},{"ruleId":"385","severity":1,"message":"422","line":62,"column":42,"nodeType":"387","messageId":"388","endLine":62,"endColumn":44},{"ruleId":"379","severity":1,"message":"416","line":5,"column":3,"nodeType":"381","messageId":"382","endLine":5,"endColumn":7},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"390","line":9,"column":3,"nodeType":"381","messageId":"382","endLine":9,"endColumn":6},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"379","severity":1,"message":"407","line":15,"column":16,"nodeType":"381","messageId":"382","endLine":15,"endColumn":22},{"ruleId":"379","severity":1,"message":"408","line":18,"column":9,"nodeType":"381","messageId":"382","endLine":18,"endColumn":12},{"ruleId":"385","severity":1,"message":"386","line":34,"column":21,"nodeType":"387","messageId":"388","endLine":34,"endColumn":23},{"ruleId":"379","severity":1,"message":"423","line":49,"column":9,"nodeType":"381","messageId":"382","endLine":49,"endColumn":15},{"ruleId":"385","severity":1,"message":"386","line":65,"column":30,"nodeType":"387","messageId":"388","endLine":65,"endColumn":32},{"ruleId":"379","severity":1,"message":"415","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"417","line":10,"column":3,"nodeType":"381","messageId":"382","endLine":10,"endColumn":8},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"385","severity":1,"message":"386","line":34,"column":22,"nodeType":"387","messageId":"388","endLine":34,"endColumn":24},{"ruleId":"379","severity":1,"message":"424","line":55,"column":9,"nodeType":"381","messageId":"382","endLine":55,"endColumn":16},{"ruleId":"379","severity":1,"message":"418","line":60,"column":9,"nodeType":"381","messageId":"382","endLine":60,"endColumn":14},{"ruleId":"379","severity":1,"message":"392","line":1,"column":17,"nodeType":"381","messageId":"382","endLine":1,"endColumn":25},{"ruleId":"379","severity":1,"message":"406","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":19},{"ruleId":"379","severity":1,"message":"416","line":3,"column":10,"nodeType":"381","messageId":"382","endLine":3,"endColumn":14},{"ruleId":"379","severity":1,"message":"425","line":1,"column":27,"nodeType":"381","messageId":"382","endLine":1,"endColumn":36},{"ruleId":"379","severity":1,"message":"426","line":4,"column":8,"nodeType":"381","messageId":"382","endLine":4,"endColumn":20},{"ruleId":"385","severity":1,"message":"386","line":13,"column":19,"nodeType":"387","messageId":"388","endLine":13,"endColumn":21},{"ruleId":"385","severity":1,"message":"386","line":56,"column":18,"nodeType":"387","messageId":"388","endLine":56,"endColumn":20},{"ruleId":"385","severity":1,"message":"386","line":57,"column":20,"nodeType":"387","messageId":"388","endLine":57,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":63,"column":27,"nodeType":"387","messageId":"388","endLine":63,"endColumn":29},{"ruleId":"379","severity":1,"message":"394","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":13},{"ruleId":"379","severity":1,"message":"394","line":2,"column":23,"nodeType":"381","messageId":"382","endLine":2,"endColumn":26},{"ruleId":"379","severity":1,"message":"392","line":1,"column":17,"nodeType":"381","messageId":"382","endLine":1,"endColumn":25},{"ruleId":"379","severity":1,"message":"415","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"401","line":4,"column":3,"nodeType":"381","messageId":"382","endLine":4,"endColumn":9},{"ruleId":"379","severity":1,"message":"416","line":5,"column":3,"nodeType":"381","messageId":"382","endLine":5,"endColumn":7},{"ruleId":"379","severity":1,"message":"400","line":6,"column":3,"nodeType":"381","messageId":"382","endLine":6,"endColumn":7},{"ruleId":"379","severity":1,"message":"399","line":7,"column":3,"nodeType":"381","messageId":"382","endLine":7,"endColumn":13},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"390","line":9,"column":3,"nodeType":"381","messageId":"382","endLine":9,"endColumn":6},{"ruleId":"379","severity":1,"message":"417","line":10,"column":3,"nodeType":"381","messageId":"382","endLine":10,"endColumn":8},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"379","severity":1,"message":"407","line":15,"column":16,"nodeType":"381","messageId":"382","endLine":15,"endColumn":22},{"ruleId":"379","severity":1,"message":"427","line":15,"column":24,"nodeType":"381","messageId":"382","endLine":15,"endColumn":26},{"ruleId":"379","severity":1,"message":"415","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"417","line":10,"column":3,"nodeType":"381","messageId":"382","endLine":10,"endColumn":8},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"379","severity":1,"message":"407","line":15,"column":16,"nodeType":"381","messageId":"382","endLine":15,"endColumn":22},{"ruleId":"379","severity":1,"message":"415","line":2,"column":10,"nodeType":"381","messageId":"382","endLine":2,"endColumn":16},{"ruleId":"379","severity":1,"message":"401","line":4,"column":3,"nodeType":"381","messageId":"382","endLine":4,"endColumn":9},{"ruleId":"379","severity":1,"message":"397","line":8,"column":3,"nodeType":"381","messageId":"382","endLine":8,"endColumn":8},{"ruleId":"379","severity":1,"message":"417","line":10,"column":3,"nodeType":"381","messageId":"382","endLine":10,"endColumn":8},{"ruleId":"379","severity":1,"message":"404","line":11,"column":3,"nodeType":"381","messageId":"382","endLine":11,"endColumn":8},{"ruleId":"379","severity":1,"message":"405","line":12,"column":3,"nodeType":"381","messageId":"382","endLine":12,"endColumn":10},{"ruleId":"379","severity":1,"message":"406","line":14,"column":10,"nodeType":"381","messageId":"382","endLine":14,"endColumn":19},{"ruleId":"379","severity":1,"message":"407","line":15,"column":16,"nodeType":"381","messageId":"382","endLine":15,"endColumn":22},{"ruleId":"385","severity":1,"message":"386","line":22,"column":21,"nodeType":"387","messageId":"388","endLine":22,"endColumn":23},{"ruleId":"385","severity":1,"message":"386","line":24,"column":28,"nodeType":"387","messageId":"388","endLine":24,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":26,"column":28,"nodeType":"387","messageId":"388","endLine":26,"endColumn":30},{"ruleId":"385","severity":1,"message":"386","line":28,"column":28,"nodeType":"387","messageId":"388","endLine":28,"endColumn":30},{"ruleId":"385","severity":1,"message":"422","line":38,"column":16,"nodeType":"387","messageId":"388","endLine":38,"endColumn":18},{"ruleId":"385","severity":1,"message":"422","line":44,"column":22,"nodeType":"387","messageId":"388","endLine":44,"endColumn":24},{"ruleId":"385","severity":1,"message":"422","line":48,"column":20,"nodeType":"387","messageId":"388","endLine":48,"endColumn":22},"no-native-reassign",["428"],"no-negated-in-lhs",["429"],"no-unused-vars","'Collapse' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'toggle' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'FormText' is defined but never used.","'Col' is defined but never used.","'ReactDOM' is defined but never used.","'useState' is defined but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Modal' is defined but never used.","'React' is defined but never used.","'Breadcrumb' is defined but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'alerts' is assigned a value but never used.","'tmpUser' is assigned a value but never used.","'Image' is defined but never used.","'Spinner' is defined but never used.","'useToasts' is defined but never used.","'uuidv4' is defined but never used.","'mem' is assigned a value but never used.","'renderedStoreTable' is assigned a value but never used.","'setRenderedStoreTable' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'dx' is already defined.","'Memory' is defined but never used.","'Form' is defined but never used.","'Table' is defined but never used.","'newID' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Expected '!==' and instead saw '!='.","'gen_id' is assigned a value but never used.","'refresh' is assigned a value but never used.","'useEffect' is defined but never used.","'SingleTimers' is defined but never used.","'v4' is defined but never used.","no-global-assign","no-unsafe-negation"]